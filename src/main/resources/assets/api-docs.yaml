openapi: 3.0.3

info:
  title: Consent
  description: A set of web-services containing methods for ingesting and retrieving expressions representing data use restrictions found within consent forms.
  version: 1.0.1
  license:
    name: BSD
    url: http://opensource.org/licenses/BSD-3-Clause
  termsOfService: https://github.com/DataBiosphere/consent

servers:
  - url: /

security:
  - googleoauth:
      - email
      - profile

paths:
  /api/ontology:
    get:
      summary: List Ontology Files
      description: Returns description of the current ontology files that are indexed and stored.
      tags:
        - Ontology
      responses:
        200:
          description: Returns the collection of current ontology file information.
        400:
          description: There was a problem retrieving the files
    post:
      summary: Upload Ontology File
      description: Uploads and indexes an ontology file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      parameters:
        - name: metadata
          schema:
            type: string
          in: formData
          description: |
            JSON object specifying the ontology file metadata. Prefix is "DUOS" or "DOID" and type is "Organization" or "Disease"
            Examples:
              `{ "ontology_file": { "prefix": "DUOS", "type": "Organization" } }`
              `{ "ontology_file": { "prefix": "DOID", "type": "Disease" } }`
          required: true
        - name: ontology_file
          schema:
            type: file
          in: formData
          description: The uploaded ontology file
          required: true
      tags:
        - Ontology
      responses:
        200:
          description: Returns the result of the upload operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyFile'
        400:
          description: There was a problem indexing the file and the results were not uploaded or indexed
    put:
      summary: Delete Indexed File
      description: Delete an indexed ontology file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      tags:
        - Ontology
      responses:
        200:
          description: Successful file deletion
        400:
          description: There was a problem deleting the file.
      parameters:
        - name: fileURL
          in: formData
          description: Storage URL of the file to delete.
          required: true
          schema:
            type: string
  /api/ontology/file:
    get:
      summary: Get Ontology File
      description: Get the specified ontology file by storage url
      parameters:
        - name: fileUrl
          in: query
          description: File URL
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          description: File Name
          required: true
          schema:
            type: string
      tags:
        - Ontology
      responses:
        200:
          description: Specified file.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/ontology/types:
    get:
      summary: Get Ontology Types
      description: Get the allowed types for ontology file indexing purposes
      tags:
        - Ontology
      responses:
        200:
          description: List of allowed types.
  /api/consent/{consentId}/association:
    get:
      summary: Get Associations for Consent
      description: Returns the associations identified by the parameters.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: associationType
          in: query
          description: "Association's type, 'sample', 'sampleSet', or 'workspace'"
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: Optional ID of the requested association
          required: false
          schema:
            type: string
      tags:
        - Consent
        - Association
      responses:
        200:
          description: An array of Consent Associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentAssociation'
        400:
          description: Required parameter is null
        default:
          description: Unexpected error
    post:
      summary: Create Associations for Consent
      description: Create the associations sent as parameters.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: body
          in: body
          description: Associations to be created
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ConsentAssociation'
      tags:
        - Consent
        - Association
      responses:
        200:
          description: An array of created consent associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentAssociation'
        default:
          description: Unexpected error
    put:
      summary: Update Associations for Consent
      description: Update the association identified by the parameters
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: body
          in: body
          description: Associations to be updated
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ConsentAssociation'
      tags:
        - Consent
        - Association
      responses:
        200:
          description: An array with the updated consent associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentAssociation'
        default:
          description: Unexpected error
    delete:
      summary: Delete Associations for Consent
      description: Deletes the association identified by the parameters
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: associationType
          in: query
          description: "Association's type"
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: Object ID of the requested association
          required: true
          schema:
            type: string
      tags:
        - Consent
        - Association
      responses:
        200:
          description: An array with the deleted consent associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentAssociation'
        default:
          description: Unexpected error
  /api/consent/cases/pending/{dacUserId}:
    get:
      summary: Get Consent Pending Cases
      description: Describes the cases that the user has without logging his vote.
      parameters:
        - name: dacUserId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      tags:
        - Pending Case
      responses:
        200:
          description: An array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PendingCase'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/consent/cases/summary:
    get:
      summary: Get Consent Summary Cases
      description: Returns number of denied, approved and pending cases.
      tags:
        - Consent Summary
      responses:
        200:
          description: Returns the summary of cases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/consent/cases/summary/file:
      get:
        summary: Get Consent Summary Detail File
        description: Returns a file with the detail of the reviewed cases whose type will be specified by fileType param.
        parameters:
         - name: fileType
           in: query
           description: DataAccess / TranslateDUL , defines the type of the reviewed cases info required.
           required: true
           schema:
             type: string
        tags:
          - Summary File
        responses:
          200:
            description: Export data to a txt file.
            content:
              text/plain:
                schema:
                  type: string
  /api/consent/cases/closed:
    get:
      summary: Describe Closed Elections
      description: Returns number of denied, approved and pending cases.
      tags:
        - Election
        - Consent
      responses:
        200:
          description: Returns the list of closed consent cases.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Election'
        404:
          description: unexpected error
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ErrorResponse'
  /api/consent/{consentId}/election:
    post:
      summary: Create Consent Election
      description: Creates a consent election
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: election
          in: body
          description: Election to be created
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
        - Consent
      responses:
        201:
          description: Returns the URI to access the newly created election.
        400:
          description: There is an existing open election for the consent.
        404:
          description: The consent sent as a parameter does not exist.
    get:
       summary: Describe Consent Election
       description: Returns the election for the consent sent as a parameter.
       parameters:
         - name: consentId
           in: path
           description: Consent ID.
           required: true
           schema:
             type: string
       tags:
         - Election
         - Consent
       responses:
         200:
           description: Returns the election.
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Election'
         default:
           description: "Error"
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResponse'
  /api/consent/{consentId}/election/dac/{dacId}:
    post:
      summary: Create Consent Election For Dac
      description: |
        Creates a consent election for a data access committee. Assigns the consent to the provided
        Data Access Committee.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: dacId
          in: path
          description: DAC ID
          required: true
          schema:
            type: integer
        - name: election
          in: body
          description: Election to be created
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
        - Consent
      responses:
        201:
          description: Returns the URI to access the newly created election.
        400:
          description: |
            There is an existing open election for the consent, or the consent is already
            associated to an existing dac.
        404:
          description: The consent or dac does not exist.
  /api/consent/{consentId}/election/{id}:
    put:
      summary: Update Consent Election
      description: Updates the election for the consent ID sent as parameter.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Election ID
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          description: Election to be created
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
        - Consent
      responses:
        200:
          description: Returns the updated election.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        404:
          description: "The Election/Consent doesn't exist."
    delete:
      summary: Delete Election
      description: Deletes the election identified by the IDs.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Election ID
          required: true
          schema:
            type: integer
      tags:
        - Election
        - Consent
      responses:
        200:
          description: The election was deleted.
        404:
          description: "The Election/Consent doesn't exist."
  /api/consent/manage:
    get:
      summary: Manage Consents
      description: Returns the list of consents available to be managed.
      tags:
        - Consent
      responses:
        200:
          description: The list of consents available to be managed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentManage'
  /api/consent/unreviewed:
    get:
      summary: Get total unreviewed DULs
      description: Retrieves the amount of unreviewed DUL elections.
      tags:
        - Consent
      responses:
        200:
          description: 'Returns an integer corresponding to the amount of unreviewed DULs'
  /api/consent:
    get:
      summary: Find Consent by name
      description: Returns the Consent identified by the name.
      parameters:
        - name: name
          in: query
          description: Consent Name
          required: true
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: Returns the requested consent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
        400:
          description: The consent associated with the provided name has not been approved.
        404:
          description: The consent associated with the provided name could not be found.
    post:
      summary: Create new Consent
      description: Creates the consent sent with the request.
      parameters:
        - name: rec
          in: body
          description: Object that represents a Consent
          required: true
          schema:
            $ref: '#/components/schemas/Consent'
      tags:
        - Consent
      responses:
        201:
          description: Returns the URL to find the created consent.
        500:
          description: Internal Server Error.
  /api/consent/{id}:
    get:
      summary: Get Consent by ID
      description: Returns the consent identified by the ID.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: Returns the requested consent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
        404:
          description: The consent associated with the ID couldn't be found.
    put:
      summary: Update Consent by ID
      description: Updates the consent identified by the ID.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: updated
          in: body
          description: Object that represents the consent to be updated
          required: true
          schema:
            $ref: '#/components/schemas/Consent'
      tags:
        - Consent
      responses:
        200:
          description: Returns the requested consent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
        400:
          description:
            Consent updates are only allowed when
              1-There have been no previous elections created for this consent
              2-The most recent election has been closed/cancelled AND archived
        404:
          description: The consent associated with the ID couldn't be found.
        500:
          description: Internal server error
  /api/consent/{id}/matches:
    get:
      summary: getMatches
      description: Returns the matches that are related to this consent.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
      tags:
        - Match
        - Consent
      responses:
        200:
          description: Returns a list of matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
        404:
          description: The consent for the id couldn't be found.
  /api/consent/{consentId}/vote/{id}:
    post:
      summary: firstVoteUpdate
      description: Returns the created vote.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The vote ID.
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/Vote'
      tags:
        - Vote
      responses:
        200:
          description: Returns the created vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: 'Bad request, malformed entity, etc'
        404:
          description: The association type wasn't send, or the application couldn't find any consents that matched the search criteria.
    put:
      summary: updateConsentVote
      description: Returns the updated vote.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The vote ID.
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/Vote'
      tags:
        - Vote
      responses:
        200:
          description: Returns the created vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: Bad request, malformed entity, etc.
    get:
      summary: describe
      description: Returns the required vote.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The vote ID.
          required: true
          schema:
            type: integer
      tags:
        - Vote
      responses:
        200:
          description: Returns the required vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
    delete:
      summary: deleteVote
      description: Deletes the required vote.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The vote ID.
          required: true
          schema:
            type: integer
      tags:
        - Vote
      responses:
        200:
          description: Response = Vote was deleted
          content:
            application/json:
              schema:
                type: string
        404:
          description: The vote couldn't be found
  /api/consent/{consentId}/vote:
    delete:
      summary: deleteVotes
      description: Deletes the votes present for the consent sent as a parameter.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
      tags:
        - Vote
        - Consent
      responses:
        200:
          description: Response = Votes for specified consent have been deleted
          content:
            application/json:
              schema:
                type: string
        404:
          description: The votes for the consent ID couldn't be found
    get:
      summary: describeAllVotes
      description: Returns all the votes related to this consent.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
      tags:
        - Vote
        - Consent
      responses:
        200:
          description: Returns the list of found votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
  /api/dac:
    post:
      summary: Create a DAC
      operationId: createDac
      description: Create a Data Access Committee
      parameters:
        - name: dac
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/Dac'
      tags:
        - DAC
      responses:
        200:
          description: Successfully created a DAC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dac'
        400:
          description: Bad Request. DAC Name and Description are required.
        500:
          description: Internal Server Error
    put:
      summary: Update a DAC
      operationId: updateDac
      description: Update a Data Access Committee
      parameters:
        - name: dac
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/Dac'
      tags:
        - DAC
      responses:
        200:
          description: Successfully upated a DAC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dac'
        400:
          description: Bad Request. DAC ID, Name, and Description are required.
        500:
          description: Internal Server Error
    get:
      summary: Get all DACs
      description: All Data Access Committees with a list of chairpersons and members
      tags:
        - DAC
      responses:
        200:
          description: All Data Access Committees with chairpersons and members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dac'
        500:
          description: Internal Server Error
  /api/dac/{dacId}:
    get:
      summary: Get DAC by ID
      operationId: getDacById
      description: Get Data Access Committee by Id
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The Data Access Committee matching the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dac'
        404:
          description: No DAC found with the given ID
        500:
          description: Internal Server Error
    delete:
      summary: Delete DAC by ID
      operationId: deleteDac
      description: Delete Data Access Committee by Id
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The Data Access Committee matching the provided ID was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dac'
        404:
          description: No DAC found with the given ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/member/{userId}:
    post:
      summary: Add DAC Member
      operationId: addDacMember
      description: Adds a User as a Member to a Data Access Committee
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The added DAC Member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: No DAC or User found with the provided ID
        409:
          description: User is already a member of the DAC
        500:
          description: Internal Server Error
    delete:
      summary: Remove DAC Member
      operationId: removeDacMember
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: Dac member successfully removed
        404:
          description: No DAC or User found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/chair/{userId}:
    post:
      summary: Add DAC Chair
      operationId: addDacChair
      description: Adds a User as a Chairperson to a Data Access Committee
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The added DAC Chairperson
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: No DAC or User found with the provided ID
        409:
          description: User is already a member of the DAC
        500:
          description: Internal Server Error
    delete:
      summary: Remove DAC Chairperson
      operationId: removeDacChair
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: Dac chairperson successfully removed
        400:
          description: Dacs require at least one chair.
        404:
          description: No DAC or User found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/datasets:
    get:
      summary: Get All Datasets for DAC
      operationId: getDacDatasets
      description: List all Datasets of a DAC
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The list of datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
        404:
          description: No DAC found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/membership:
    get:
      summary: Get All Members of DAC
      operationId: getDacMembership
      description: List all members of a DAC, including Chairpersons and Members
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The list of dac members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: No DAC found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/users/{term}:
    get:
      summary: Find Users by Search Term
      operationId: findUsersByTerm
      description: Find all users that match the search term. Matches on name and email address.
      parameters:
        - name: term
          in: path
          description: The Search Term
          required: true
          schema:
            type: string
      tags:
        - DAC
      responses:
        200:
          description: The list of users matching the term
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/User'
        500:
          description: Internal Server Error
  /api/dacuser:
    post:
      summary: Create User
      description: Creates a User
      parameters:
        - name: dac
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/User'
      tags:
        - User
      responses:
        200:
          description: Returns the created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Malformed user entity.
    get:
      summary: describeAllUsers
      description: Returns all the users
      tags:
        - User
      responses:
        200:
          description: Returns the collection of all the users and their permissions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/dacuser/{email}:
    get:
      summary: describe
      description: Returns the user identified by the email.
      parameters:
        - name: email
          in: path
          description: The email of the user.
          required: true
          schema:
            type: string
      tags:
        - User
      responses:
        200:
          description: Returns the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/dacuser/{id}:
    put:
      summary: update
      description: |
        Updates the user identified by the ID. Requires the authenticated user to have the same id
        as that of the user being updated except in the admin case - admins can update information
        for other users. Role changes are not allowed for Chairperson and Member roles using this endpoint.
        All Chairperson and Member changes (additions or removals) are ignored. See
        [DAC](/#!/DAC) endpoints for **POST/DELETE** endpoints for **/api/dac/{dacId}/chair/{userId}** and
        **/api/dac/{dacId}/member/{userId}** calls.
      parameters:
        - name: id
          in: path
          description: The id of the updated user
          required: true
          schema:
            type: string
        - name: user
          in: body
          description: The updated user information
          required: true
          schema:
            type: object
            properties:
              updatedUser:
                $ref: '#/components/schemas/User'
      tags:
        - User
      responses:
        200:
          description: Returns the updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Malformed user entity.
        403:
          description: User must have appropriate roles to update different users' information.
  /api/dacuser/status/{userId}:
    get:
      summary: getUserStatusById
      description: |
        DEPRECATED: Use GET /api/dacuser/{email}
        Get the user's status by user id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - User
      responses:
        200:
          description: Returns the user by status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Server Error
    put:
      summary: updateUserStatusById
      description: |
        DEPRECATED: Use PUT /api/dacuser/{id}
        Update a user's status by user id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: json
          in: body
          schema:
            type: object
          description: |
            JSON object with a "status" member. Statuses allowed are "pending", "approved", or
            "rejected".
      tags:
        - User
      responses:
        200:
          description: Returns the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Server Error
  /api/dar/v2:
    post:
      summary: Create Data Access Request, version 2
      description: Creates a Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a DAR in json format.
          required: true
          schema:
            $ref: '#/components/schemas/DataAccessRequest'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the created Data Access Request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataAccessRequest'
        500:
          description: Internal Server Error.
  /api/dar/v2/{referenceId}:
    get:
      summary: Get a Data Access Request by Reference Id
      description: Returns the created Data Access Request.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns a Data Access Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAccessRequest'
        400:
          description: The provided Reference Id is not a valid DAR identifier
        404:
          description: No DAR can be found with the provided identifier
        500:
          description: Server Error
    put:
      summary: Update a Data Access Request by Reference Id
      description: Returns the updated Data Access Request.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
        - name: dar
          in: body
          description: The fields that represent a DAR in json format.
          required: true
          schema:
            $ref: '#/components/schemas/DataAccessRequest'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns a Data Access Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAccessRequest'
        403:
          description: Updates are restricted to the create user.
        500:
          description: Internal Server Error.
  /api/dar/v2/draft:
    post:
      summary: Create Draft Data Access Request
      description: Create Draft Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a Data Access Request, json format.
          required: true
          schema:
            $ref: '#/components/schemas/DataAccessRequest'
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the created draft Data Access Request.
        500:
          description: Internal Server Error.
  /api/dar/v2/draft/{referenceId}:
    put:
      summary: Update Draft Data Access Request
      description: Update Draft Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
        - name: dar
          in: body
          description: The fields that represent a Data Access Request, json format.
          required: true
          schema:
            $ref: '#/components/schemas/DataAccessRequest'
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the upated draft Data Access Request.
        403:
          description: Updates are restricted to the create user.
        500:
          description: Internal Server Error.
  /api/dar/v2/{referenceId}/irbDocument:
    get:
      summary: Retrieve DAR IRB Document
      description: Retrieve the IRB Document for a Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Store DAR IRB Document
      description: |
        Store an IRB Document for a Data Access Request.
        Previous document is deleted.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      tags:
        - Data Access Request
      responses:
        200:
          description: Stores the document and returns the updated Data Access Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAccessRequest'
  /api/dar/v2/{referenceId}/collaborationDocument:
    get:
      summary: Retrieve DAR Collaboration Document
      description: Retrieve the Collaboration Document for a Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Store DAR Collaboration Document
      description: |
        Store a Collaboration Document for a Data Access Request.
        Previous document is deleted.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      tags:
        - Data Access Request
      responses:
        200:
          description: Stores the document and returns the updated Data Access Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAccessRequest'

  /api/dar:
    post:
      summary: createdDataAccessRequest
      description: |
        DEPRECATED: Use POST /api/dar/v2
        Creates a Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a DAR, json format.
          required: true
          schema:
            $ref: '#/components/schemas/DataAccessRequest'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the created Data Access Request, json file.
        500:
          description: Internal Server Error.
    get:
      summary: describeDataAccessRequests
      description: Retrieves all the existent DARs
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the DAR collection
  /api/dar/{id}:
    get:
      summary: describe
      description: |
        DEPRECATED: Use GET /api/dar/v2/{referenceId}
        Retrieves the DAR identified by the ID
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns a Data Access Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAccessRequest'
        400:
          description: The provided ID is not a valid DAR identifier
        404:
          description: No DAR can be found with the provided identifier
        500:
          description: Server Error
    put:
      summary: updateDataAccessRequest
      description: |
        DEPRECATED: Use PUT /api/dar/v2/{referenceId}
        Updates the DAR identified by the dar_code.
      parameters:
        - name: id
          in: path
          description: dar_code that identifies univocally
          required: true
          schema:
            type: string
        - name: dataAccessRequest
          in: body
          description: The fields that represent a DAR, json format.
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the updated DAR.
        400:
          description: Bad request.
    delete:
      summary: delete
      description: Deletes the DAR identified by the ID
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Response = Research Purpose was deleted
          content:
            application/json:
              schema:
                type: string
        404:
          description: The requested DAR couldn't be found.
  /api/dar/cancel/{id}:
    put:
      summary: Cancel a Data Access Request
      description: Cancel a Data Access Request
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Successful cancelation of the Data Access Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAccessRequest'
        404:
          description: Unable to find the Data Access Request with the provided id
        500:
          description: Internal error
  /api/dar/modalSummary/{id}:
    get:
      summary: getDataAcessRequestModalSummary
      description: Retrieves a DARModalDetails.
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: 'Returns a DARModalDetails initialized with the DAR associated with the provided Id.'
  /api/dar/find/{id}:
    get:
      summary: describeSpecificFields
      description: Returns the requested fields present in the DAR identified by the ID
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The name of the required fields
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: A JSON with the requested fields or the whole DAR if there wasn't any requested fields in the parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAccessRequest'
        404:
          description: The requested DAR couldn't be found.
  /api/dar/find/{id}/consent:
    get:
      summary: describeConsentForDAR
      description: Returns the consent related to this DAR.
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
        - Consent
      responses:
        200:
          description: Returns the Consent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
        404:
          description: The requested couldn't be found or the DAR doesn't exist.
  /api/dar/manage:
      get:
        summary: Manage Data Access Requests
        description: |
          Returns all the elections created for Data Access Requests relevant to the current user.
          If the user is requesting these as an admin, all are returned. As a DAC member, only those
          assigned to the DAC are returned. As a general user, only those created by the user are
          returned.
        parameters:
          - name: userId
            in: query
            description: Optional user id to filter Data Access Requests by
            required: false
            schema:
              type: integer
        tags:
          - Data Access Request
        responses:
          200:
            description: A list of DAR elections.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/DataAccessRequestManage'
          400:
            description: |
              If optional user id is provided, it must be that of the authenticated user. Non-admin
              and non-DAC users can only see their own Data Access Requests.
  /api/dar/cases/unreviewed:
      get:
        summary: getTotalUnReviewedDAR
        description: Retrieves the amount of unreviewed DAR.
        tags:
          - Data Access Request
        responses:
         200:
           description: 'Returns an integer corresponding to the amount of unreviewed DARs'
  /api/dar/partial:
    post:
      summary: Create Partial Data Access Request
      description: |
        DEPRECATED: Use POST /api/dar/v2/draft
        Create Partial Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a DAR, json format.
          required: true
          schema:
            $ref: '#/components/schemas/DataAccessRequest'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the created partial Data Access Request, json file.
        500:
          description: Internal Server Error.

  /api/dataRequest/cases/pending/{dacUserId}:
    get:
      summary: getDataRequestPendingCases
      description: Retrieves the election the user has with votes pending.
      parameters:
        - name: dacUserId
          in: path
          description: The id of the user
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
        - Pending Case
      responses:
        200:
          description: A list of Pending Cases.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PendingCase'
  /api/dataRequest/cases/summary/DataAccess:
    get:
      summary: getConsentSummaryCases
      description: Retrieves the Summary of DAR cases
      tags:
        - Summary
        - Data Access Request
      responses:
        200:
          description: A summary of cases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/dataRequest/cases/summary/RP:
    get:
      summary: getConsentSummaryCases
      description: Retrieves the Summary of Research Purposes cases
      tags:
        - Summary
        - Research Purpose
      responses:
        200:
          description: A summary of cases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/dataRequest/cases/closed:
    get:
      summary: describeClosedElections
      description: Retrieves the closed DAR elections
      tags:
        - Data Access Request
        - Election
      responses:
        200:
          description: A list of closed DAR elections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Election'
        404:
          description: Election was not found.
  /api/dataRequest/{requestId}/election:
    get:
      summary: describe
      description: Returns the election for the sent DAR, if it exists.
      parameters:
        - name: requestId
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
        - Election
      responses:
        200:
          description: Returns the requested election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        404:
          description: The election or the DAR couldn't be found.
    post:
      summary: createDataRequestElection
      description: Creates an Election for the DAR identified by the ID.
      parameters:
        - name: requestId
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
        - name: rec
          in: body
          description: The election to be created
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Data Access Request
        - Election
      responses:
        200:
          description: The created election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        400:
          description: Bad request.
        404:
          description: The DAR couldn't be found.
  /api/dataRequest/{requestId}/election/{id}:
    delete:
      summary: deleteElection
      description: Deletes the election identified by the id.
      parameters:
        - name: requestId
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The id of the election
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
        - Election
      responses:
        200:
          description: Response = Election was deleted
          content:
            application/json:
              schema:
                type: string
        404:
          description: The DAR or the election couldn't be found.
  /api/dataRequest/{requestId}/pdf:
    get:
      summary: DAR in PDF format
      description: Returns the PDF for the requested DAR
      parameters:
        - name: requestId
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the requested DAR in PDF form
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: The election or the DAR couldn't be found.
  /api/consent/{id}/dul:
    get:
      summary: getDUL
      description: Returns Data Use Letter file specified by consentId.
      parameters:
        - name: id
          in: path
          description: Id of the consent at which belongs the Data Use Letter.
          required: true
          schema:
            type: string
        - name: electionId
          in: query
          required: false
          description: Optional election id for the consent election
          schema:
            type: integer
      tags:
        - Consent
      responses:
        200:
          description: Data Use Letter file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
              description: attachment; filename= targetFile name
        404:
          description: Could not find consent with the specified Id
    post:
      summary: createDUL
      description: Persists the loaded file in the CloudStorage and update the related Consent.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      parameters:
        - name: data
          in: formData
          description: Data Use Letter file.
          required: true
          schema:
            type: file
        - name: id
          in: path
          description: Id of the consent at which belongs the Data Use Letter.
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          description: File name.
          required: false
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: The modified Consent with dataUseLetter field empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
        404:
          description: Could not find consent with the specified Id
    put:
      summary: updateDUL
      description: Updates the Consent's Data Use Letter in the CloudStorage and the related Consent.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      parameters:
        - name: data
          in: formData
          description: new Data Use Letter file.
          required: true
          schema:
            type: file
        - name: id
          in: path
          description: Id of the consent at which belongs the Data Use Letter.
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          description: File name.
          required: false
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: The updated Consent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
        404:
          description: Could not find consent with the specified Id
    delete:
      summary: deleteDUL
      description: Deletes the Data Use Letter of the Consent specified by Id and updates the Consent's dataUseLetter property.
      parameters:
        - name: id
          in: path
          description: Id of the consent at which belongs the Data Use Letter.
          required: true
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: The updated Consent with empty dataUseLetter property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
        404:
          description: Could not find consent with the specified Id
  /api/dataRequest/{requestId}/vote:
    get:
      summary: describeAllVotes
      description: Returns the votes of the election with the specified referenceId.
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election of the requested Votes
          required: true
          schema:
            type: string
      tags:
        - Vote
        - DataRequest
      responses:
        200:
          description: Returns the DataRequest.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
    delete:
      summary: deleteVotes
      description: Deletes the votes of the election with the specified reference Id
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election of the Votes
          required: true
          schema:
            type: string
      tags:
        - Vote
        - DataRequest
      responses:
        200:
          description: The Votes were deleted.
        404:
          description: The Election doesn't exist.
  /api/dataRequest/{requestId}/vote/{id}:
    get:
      summary: describe
      description: Returns the Vote with the specified Id.
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election of the requested Vote ( this value is not used in the search , its only to complete the path)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - DataRequest
      responses:
        200:
          description: Returns the requested Vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        404:
          description: The Vote doesn't exist.
    post:
      summary: createDataRequestVote
      description: update a Vote specified by VoteId of a DataRequest Election.
      parameters:
        - name: rec
          in: body
          description: Vote to be created
          required: true
          schema:
            $ref: '#/components/schemas/Vote'
        - name: requestId
          in: path
          description: referenceId of the Election of the requested Vote ( this value is not used in the create process , its only to complete the path)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - DataRequest
      responses:
        201:
          description: Returns the updated Vote.
        400:
          description: Required parameter is null
        404:
          description: The \"to update\" vote doesn't exist.
    put:
      summary: updateDataRequestVote
      description: update an edited Vote specified by VoteId of a DataRequest Election.
      parameters:
        - name: rec
          in: body
          description: Vote to be created
          required: true
          schema:
            $ref: '#/components/schemas/Vote'
        - name: requestId
          in: path
          description: referenceId of the Election of the requested Vote ( this value is not used in the create process , its only to complete the path)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - DataRequest
      responses:
        201:
          description: Returns the updated Vote.
        400:
          description: Required parameter is null
        404:
          description: The \"to update\" vote doesn't exist.
    delete:
      summary: deleteVote
      description: Deletes the vote specified by the requestId and the VoteId.
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election at which the vote belongs.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - DataRequest
      responses:
        200:
          description: The Vote was deleted.
        404:
          description: Could not find vote with this Vote ID.
  /api/dataRequest/{requestId}/vote/{id}/final:
    post:
      summary: updateFinalAccessConsentVote
      description: update a the FinalAccessVote specified by VoteId of a DataRequest Election and set finalAccessVote Election property to TRUE.
      parameters:
        - name: rec
          in: body
          description: Vote to be created
          required: true
          schema:
            $ref: '#/components/schemas/Vote'
        - name: requestId
          in: path
          description: referenceId of the Election of the requested Vote ( this value is not used in the process , its only to complete the path)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - DataRequest
      responses:
        200:
          description: Returns the updated Vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: Required parameter is null
        404:
          description: Election for specified id does not exist
  /api/dataRequest/{requestId}/vote/final:
    get:
      summary: describeFinalAccessVote
      description: Returns the Vote with isfinalAccessVote property  = TRUE with the specified Id.
      parameters:
        - name: requestId
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - DataRequest
      responses:
        200:
          description: Returns the requested Vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        404:
          description: Could not find a vote with this id.
  /api/dataset:
    get:
      summary: describeDatasets
      description: Returns Dataset list filtering by Role.
      parameters:
        - name: dacUserId
          in: query
          description: UserId used to retrieve the user's roles
          required: true
          schema:
            type: integer
      tags:
        - Datasets
      responses:
        200:
          description: An array of Datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
        404:
          description: Required parameter is null.
    post:
      summary: createDataSet
      description: Creates the Datasets defined in the input .TSV /.txt file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      parameters:
        - name: data
          in: formData
          description: File that contains one ore more Datasets.
          required: true
          schema:
            type: file
        - name: overwrite
          in: query
          description: Describes if the API has to overwrite a DataSet that is already defined.
          required: false
          schema:
            type: boolean
      tags:
        - Datasets
      responses:
        200:
          description: An array of created Datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
        400:
          description: Array of the errors found with a brief description of each one.
          content:
            application/json:
              schema:
                type: string
  /api/dataset/v2:
    post:
      summary: Creates the Dataset from JSON
      description: Creates the Dataset from JSON
      requestBody:
        description: Submitted dataset registration form
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      tags:
        - Datasets
      responses:
        201:
          description: Successfully created Dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        400:
          description: External Error (invalid input)
        500:
          description: Internal Error (something went wrong processing a valid input)
  /api/dataset/sample:
    get:
      summary: getDataSetSample
      description: Returns a Dataset sample .tsv file.
      tags:
        - Datasets
      responses:
        200:
          description: .tsv sample
          content:
            text/plain:
              schema:
                type: string
          headers:
            Content-type:
              schema:
                type: string
              description: text/plain
            Content-Disposition:
              schema:
                type: string
              description: attachment; filename=DataSetSample.tsv
        500:
          description: Server error.
  /api/dataset/dictionary:
    get:
      summary: describeDictionary
      description: Return all the values that compound the dictionary , this values are the attributes of a Dataset.
      tags:
        - Datasets
      responses:
        200:
          description: An array of the existent dictionaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dictionary'
        500:
          description: Server error.
  /api/dataset/{id}:
    get:
      summary: Get Dataset by Id
      description: Finds Dataset and DatasetProperties of the Dataset specified by id.
      parameters:
        - name: id
          in: path
          description: ID of the Dataset
          required: true
          schema:
            type: integer
      tags:
        - Datasets
      responses:
        200:
          description: The Dataset with properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        404:
          description: Not Found
        500:
          description: Server error
    delete:
      summary: Delete Dataset
      description: Deletes Dataset and DatasetProperties of the Dataset specified by id.
      parameters:
        - name: id
          in: path
          description: ID of the Dataset
          required: true
          schema:
            type: integer
      tags:
        - Datasets
      responses:
        200:
          description: The Dataset was deleted.
        500:
          description: Server error.
  /api/dataset/{id}/approved/users:
    get:
      summary: Dataset Approved Users
      description: Dataset Approved Users
      parameters:
        - name: id
          in: path
          description: The dataset id
          required: true
          schema:
            type: integer
      tags:
        - Datasets
      responses:
        200:
          description: Dataset Approved Users
          content:
            text/plain:
              schema:
                type: string
          headers:
            Content-type:
              schema:
                type: string
              description: text/plain
            Content-Disposition:
              schema:
                type: string
              description: attachment; filename=DatasetApprovedUsers.tsv
        500:
          description: Server error.
  /api/dataset/download:
    post:
      summary: downloadDataSets
      description: Returns the dataset Properties of the datasets whose Ids are in the idList
      parameters:
        - name: idList
          in: body
          description: List of DatasetIds.
          required: true
          schema:
            type: array
            items:
              type: string
      tags:
        - Datasets
      responses:
        200:
          description: The Dataset was deleted.
        500:
          description: Server error.
  /api/dataset/autocomplete/{partial}:
    get:
      summary: datasetAutocomplete
      description: Returns Dataset list with the Datasets whose objectsIds matches with the partial string.
      parameters:
        - name: partial
          in: path
          description: the value to autocomplete.
          required: true
          schema:
            type: string
      tags:
        - Datasets
      responses:
        200:
          description: An array of Dataset objectIds
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Server error.
  /api/dataset/disable/{id}/{active}:
        delete:
          summary: disableDataSet
          description: 'Updates the Active status of the Dataset specified by id'
          parameters:
            - name: id
              in: path
              description: the Id of the Dataset to Update.
              required: true
              schema:
                type: string
            - name: active
              in: path
              required: true
              schema:
                type: boolean
          tags:
            - Datasets
          responses:
            200:
              description: An array of Dataset objectIds
              content:
                text/plain:
                  schema:
                    type: array
                    items:
                        type: string
            500:
              description: Server error.
  /api/datasetAssociation/{datasetId}:
    get:
      summary: Get Dataset Associations
      description: Get all dataset associations
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
      tags:
        - Datasets
      responses:
        200:
          description: Map of associated and non-associated users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetAssociationMap'
    post:
      summary: Create Dataset Associations
      operationId: Create dataset associations for the provided dataset and users
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
        - name: userIdList
          in: body
          description: list of user ids
          required: true
          schema:
            type: array
            items:
              type: integer
      tags:
        - Datasets
      responses:
        201:
          description: An array of created dataset associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetAssociation'
    put:
      summary: Update Dataset Associations
      operationId: Update dataset associations for the provided dataset and users
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
        - name: userIdList
          in: body
          description: list of user ids
          required: true
          schema:
            type: array
            items:
              type: integer
      tags:
        - Datasets
      responses:
        200:
          description: An array of updated dataset associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetAssociation'
  /api/election/{id}:
    get:
      summary: describeElectionById
      description: Returns the Election identified by Id.
      parameters:
        - name: id
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
      tags:
        - Election
      responses:
        200:
          description: Election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        400:
          description: Could not find Election with the specified Id
    put:
      summary: updateElection
      description: "Updates the election specified by Id."
      parameters:
        - name: id
          in: path
          description: Id of the Election to Update
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          description: Updated Election.
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
      responses:
        200:
          description: updated Election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        400:
          description: Illegal Argument Exception
  /api/election/{referenceId}/advance/{vote}:
    post:
      summary: Advance Elections
      description: Advance all incomplete votes in any elections on the reference.
      operationId: advanceElections
      parameters:
        - name: referenceId
          in: path
          description: referenceId for the Elections
          required: true
          schema:
            type: string
        - name: vote
          in: path
          description: Vote value for all votes in the Elections
          required: true
          schema:
            type: string
            enum:
              - Yes
              - No
      tags:
        - Election
      responses:
        200:
          description: All incomplete votes for the elections have been advanced.
        500:
          description: Server error.
  /api/electionReview:
    get:
      summary: getCollectElectionReview
      description: Returns the ElectionReview from an Open Election identified by reference Id.
      parameters:
        - name: referenceId
          in: query
          description: referenceId of the Election
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: Type of the Election
          required: true
          schema:
            type: string
            enum:
              - TranslateDUL
              - DataAccess
              - DataSet
              - RP
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/electionReview/openElection:
    get:
      summary: describeElectionById
      description: Endpoint to verify the existence of Open elections.
      tags:
        - Election
      responses:
        200:
          description: Returns TRUE if there is at least one Open election otherwise return FALSE.
          content:
            text/plain:
              schema:
                type: string
  /api/electionReview/{electionId}:
    get:
      summary: describeElectionReviewByElectionId
      description: "Returns the ElectionReview from an Election identified by ElectionId. This endpoint doesn't filter votes by isFinalAccess attribute so the reviewVote array of the retrieved ElectionReview will contain the isFinalAccess = TRUE Vote."
      parameters:
        - name: electionId
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/electionReview/access/{electionId}:
    get:
      summary: describeElectionById
      description: Returns the ElectionReview from an Election identified by ElectionId. This endpoint can be used only for DataAccess elections.
      parameters:
        - name: electionId
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
        - name: isFinalAccess
          in: query
          description: Defines if the reviewVote array of the retrieved ElectionReview will contain or not the isFinalAccess = TRUE Vote.
          required: true
          schema:
            type: integer
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/electionReview/last/{referenceId}:
    get:
      summary: getElectionReviewByReferenceId
      description: Returns the ElectionReview from an Election identified by referenceId with ElectionStatus = CLOSED and the most recent CreateDate.
      parameters:
        - name: referenceId
          in: path
          description: referenceId of the Election
          required: true
          schema:
            type: string
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/electionReview/rp/{electionId}:
    get:
      summary: describeElectionById
      description: Returns the ElectionReview from an Election identified by ElectionId. This endpoint can be used only for Research Purpose elections.
      parameters:
        - name: electionId
          in: path
          description: |
            Election Id for the associated Data Access Election
            (and not the associated RP Election, this is legacy behavior).
          required: true
          schema:
            type: integer
        - name: isFinalAccess
          in: query
          description: Defines if the reviewVote array of the retrieved ElectionReview will contain or not the isFinalAccess = TRUE Vote.
          required: true
          schema:
            type: integer
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/emailNotifier/reminderMessage/{voteId}:
    post:
      summary: Send Reminder Email
      description: Send a reminder email to the owner of a vote
      parameters:
        - name: voteId
          in: path
          description: String value of the vote id for a user's vote in an election
          required: true
          schema:
            type: string
      tags:
        - Notifier
      responses:
        200:
          description: Email successfully sent
        500:
          description: Server error.
  /api/match/{consentId}/{purposeId}:
    get:
      summary: getMatches
      description: Returns the match results between a Consent and a Data Access Request.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: purposeId
          in: path
          description: Data Access Request (or research purpose) ID
          required: true
          schema:
            type: string
      tags:
        - Consent
        - Data Access Request
        - Match
      responses:
        200:
          description: Returns a match result of the stuctured use restrictions of the Consent
            and Data Access Request. If no results are found, no data is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResult'
        500:
          description: Server error.
  /api/user/me:
    get:
      summary: Find currently authenticated user
      description: Find currently authenticated user
      tags:
        - User
      responses:
        200:
          description: The user, along with researcher properties and whitelist entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Server error.
  /api/user/{id}:
    get:
      summary: Find user by id
      description: Finds user by the user id. Available to Admin, Chair, and Member roles
      parameters:
        - name: id
          in: path
          description: The id of the user
          required: true
          schema:
            type: number
      tags:
        - User
      responses:
        200:
          description: The user, along with researcher properties and whitelist entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Server error.
  /api/user/{email}:
    delete:
      summary: Delete User by email
      description: Deletes the user identified by the email.
      parameters:
        - name: email
          in: path
          description: The email of the user.
          required: true
          schema:
            type: string
      tags:
        - User
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
  /api/user:
    post:
      summary: createResearcher
      description: Create a user with RESEARCHER role using the user's current authentication status.
      tags:
        - User
      responses:
        200:
          description: Returns the created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Unable to validate the user's google identity.
        409:
          description: User should be unique
        500:
          description: Server error.
  /api/researcher:
    post:
      summary: Create researcher properties.
      description: Create researcher properties for the current user.
      parameters:
        - name: researcherProperties
          in: body
          required: true
          description: Map<String, String> for user properties.
          schema:
            $ref: '#/components/schemas/UserProperties'
      tags:
        - User
        - Researcher
      responses:
        201:
          description: The researcher properties were created.
        400:
          description: Malformed researcher entity.
        409:
          description: Unsupported operation.
        500:
          description: Server error.
    put:
      summary: Update researcher.
      description: Updates a researcher user.
      parameters:
        - name: validate
          in: query
          description: Defines if the endpoint should validate if all the required fields are present. If not, it will fail.
          required: true
          schema:
            type: boolean
        - name: researcherProperties
          in: body
          required: true
          description: Map<String, String> for user properties.
          schema:
            $ref: '#/components/schemas/UserProperties'
      tags:
        - User
        - Researcher
      responses:
        200:
          description: The researcher was updated, and returns the properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProperties'
        400:
          description: Malformed researcher entity.
        404:
          description: The requested user doesn't exist in the system.
        500:
          description: Server error.
  /api/researcher/{userId}:
    get:
      summary: Return researcher properties.
      description: Describes all the properties for a reseacher user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - User
        - Researcher
      responses:
        200:
          description: Returns the user properties. Map<String, Object> format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProperties'
        404:
          description: The requested user doesn't exist in the system.
    delete:
      summary: Delete Researcher properties
      description: Deletes all the properties for the related user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - User
        - Researcher
      responses:
        200:
          description: The properties were deleted. No response object, just 200 response.
        404:
          description: The requested user doesn't exist in the system
  /api/researcher/{userId}/dar:
    get:
      summary: Returns the researcher properties that are part of a Data Access Request
      description: Describes all the properties that are taken from the researcher information to fill automatically a DAR request.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - User
        - Researcher
      responses:
        200:
          description: Returns the user properties. Map<String, String> format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProperties'
        404:
          description: The requested user doesnt exist in the system
  /api/nih:
    delete:
      summary: Delete Era Commons Account
      description: Removes only Era Commons Account related information from the logued user, requesting this action
      tags:
        - User
        - Researcher
        - eRA Commons
        - Nih
      responses:
        200:
          description: Returns an empty response if the operation was successful
    post:
      summary: Store NIH information
      description: Save user's eRA Commons account
      parameters:
        - name: nihAccount
          in: body
          description: NIH Account information
          required: true
          schema:
            $ref: '#/components/schemas/NIHUserAccount'
      tags:
        - User
        - Researcher
        - eRA Commons
        - Nih
      responses:
        200:
          description: Returns eRA Commons Account information. Map<String, String> format
        404:
          description: The user doesn't exist in the system
  /api/whitelist:
    post:
      summary: postWhitelist
      description: Uploads Library Card Whitelist tsv to bucket - NEW!
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      parameters:
        - name: data
          in: formData
          description: TSV file that contains whitelist information
          required: true
          schema:
            type: file
      tags:
        - Whitelist
      responses:
        201:
          description: Successfully Created
        400:
          description: Improper whitelist format
        500:
          description: Internal Server Error
  /metrics/dac/decision:
    get:
      summary: Dac Decision Metrics
      description: Dac Decision Metrics
      tags:
        - Metrics
      responses:
        200:
          description: Dac Decision Metrics
          content:
            text/plain:
              schema:
                type: string
        500:
          description: Internal Server Error
  /metrics/dar/decision:
    get:
      summary: DAR Decision Metrics
      description: DAR Decision Metrics
      tags:
        - Metrics
      responses:
        200:
          description: DAR Decision Metrics
          content:
            text/plain:
              schema:
                type: string
        500:
          description: Internal Server Error
  /status:
    get:
      summary: System Health Status
      description: A detailed description of the various subsystem statuses that Consent relies upon.
      tags:
        - Status
      responses:
        200:
          description: All systems are OK
        500:
          description: Some number of subsystems are not OK.

  /version:
    get:
      summary: Current application version
      description: The current short hash and version of the application.
      tags:
        - Status
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        500:
          description: Internal Server Error

components:
  securitySchemes:
    googleoauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            email: email authorization
            profile: profile authorization
  schemas:
    UserProperties:
      type: array
      items:
        $ref: '#/components/schemas/UserProperty'
    UserProperty:
      type: object
      properties:
        profileName:
          type: string
        country:
          type: string
        city:
          type: string
        address1:
          type: string
        address2:
          type: string
        orcid:
          type: string
        completed:
          type: string
        libraryCards:
          type: array
          items:
            type: string
        zipcode:
          type: string
        libraryCardEntries:
          type: array
          items:
            $ref: '#/components/schemas/LibraryCardEntry'
        institution:
          type: string
        nihUsername:
          type: string
        academicEmail:
          type: string
        state:
          type: string
        isThePI:
          type: string
        department:
          type: string
        checkNotifications:
          type: string
        eraAuthorized:
          type: string
        eraExpiration:
          type: string
    LibraryCardEntry:
      type: object
      properties:
        organization:
          type: string
        commonsId:
          type: string
        name:
          type: string
        email:
          type: string
        signingOfficialName:
          type: string
        signingOfficialEmail:
          type: string
        itDirectorName:
          type: string
        itDirectorEmail:
          type: string
    NIHUserAccount:
      type: object
      properties:
        nihUsername:
          type: string
          description: Nih account associated name.
        datasetPermissions:
          type: array
          items:
            type: string
          description: NIH dataset access permissions.
        status:
          type: string
          description: Flag to determine if a user is authorized.
        eraExpiration:
          type: string
          description: Contains the eRA account expiration date in miliseconds. This will be 30 days from the user's authentication.
    ConsentAssociation:
      type: object
      properties:
        associationType:
          type: string
          description: 'Defines the type of the association. Possible values: sample, sampleSet, workspace.'
        elements:
          type: array
          items:
            type: string
          description: Elements, in a hash set, to avoid duplicates.
    Consent:
      type: object
      properties:
        consentId:
          type: string
          description: The ID of the entity.
        requiresManualReview:
          type: boolean
          description: Describes if this consent has to be reviewed manually.
        dataUseLetter:
          type: string
          description: The URL of the saved file.
        useRestriction:
          type: string
          description: The UseRestriction of this consent. Used to match against another entities.
        dataUse:
          type: string
          description: The Data Use question/answer set for this consent.
        name:
          type: string
          description: Name to identify the consent.
        dulName:
          type: string
          description: Name that identifies the Data Use Letter file.
        createDate:
          type: string
          format: date
          description: Creation Date.
        updateDate:
          type: string
          format: date
          description: Date of the last update.
        sortDate:
          type: string
          format: date
          description: |
            DEPRECATED: Use updateDate
            The lastest modification date. This has historically been used to
            determine sort order in addition to update date.
        translatedUseRestriction:
          type: string
          format: date
          description: The translated use restriction of the consent.
        lastElectionStatus:
          type: string
          description: Displays the associated election if this exists, else is null.
        lastElectionArchived:
          type: boolean
          description: Flag indicating if the last election associated is archived or not. Null if election doesn't exists
        groupName:
          type: string
          description: The Group Name provided by ORSP
        updateStatus:
          type: boolean
          description: Indicates if a consent has been updated from orsp
        dacId:
          type: integer
          description: The Data Access Committee ID
    Vote:
      type: object
      properties:
        voteId:
          type: integer
          format: int32
          description: Describes the id of the vote.
        vote:
          type: boolean
          description: Describe the Positive or negative value of the vote
        dacUserId:
          type: integer
          format: int32
          description: Describes the id of the voter.
        createDate:
          type: string
          format: date
          description: Describes the date the vote was created.
        updateDate:
          type: string
          format: date
          description: Describes the date the vote was last modified.
        electionId:
          type: integer
          format: int32
          description: Describes the id of the election the election at which the vote belongs.
        rationale:
          type: string
          description: If the final vote is NO, the voter can specify why in this field.
        type:
          type: string
          description: Specifies the type of the vote (DAC, CHAIRPERSON, AGREEMENT, FINAL)
        isReminderSent:
          type: boolean
          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.
        hasConcerns:
          type: boolean
          description: For Dataset elections, it is a flag for DataSet owners concerns.
    MatchResult:
      type: object
      properties:
        id:
          type: integer
          description: The id of the stored match result
        consent:
          type: string
          description: The Consent ID
        purpose:
          type: string
          description: The Data Access Request ID
        match:
          type: boolean
          description: The match condition between the Consent and Data Access Request
        failed:
          type: boolean
          description: Indicates a system failure or not. If true, the system was not able to
            perform a logic match between the two objects due to a server error.
        createDate:
          type: string
          description: A string representation of the date that this match result was created.
    Match:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The ID of the entity.
        consent:
          type: string
          description: The matched consent.
        purpose:
          type: string
          description: The matched research purpose.
        match:
          type: boolean
          description: True if the entities match, false otherwise.
        failed:
          type: boolean
          description: True if the matching process failed, for any reason.
        createDate:
          type: string
          format: date
          description: Describes the date the match was created.
    PendingCase:
      type: object
      properties:
        referenceId:
          type: string
          description: The reference ID that identifies the case
        frontEndId:
          type: string
          description: The front end ID for the case
        logged:
          type: string
          description: Describes the logged votes vs. total votes required.
        alreadyVoted:
          type: boolean
          description: Describes if the user already voted on this case
        isReminderSent:
          type: boolean
          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.
        isFinalVote:
          type: boolean
          description: If the user is chairperson, this will be false if the final vote is not logged yet, true otherwise.
        status:
          type: string
          description: Status of the vote. Pending or editable.
        electionStatus:
          type: string
          description: Describes the status of the election related to this pending case. Open, closed or cancelled.
        electionId:
          type: integer
          format: int32
          description: Describes the id of the election related to this pending  case.
        voteId:
          type: integer
          format: int32
          description: Describes the id of the users vote, related to this particular pending case.
        createDate:
          type: string
          format: date
          description: 'Defines the type of the association. Possible values: sample, sampleSet.'
        totalVotes:
          type: integer
          format: int32
          description: Describes the total votes(users) required to vote for this election.
        votesLogged:
          type: integer
          format: int32
          description: Votes already logged in this pending case. Equal to the total of users that voted minus the ones that didnt.
        rpElectionId:
          type: integer
          format: int32
          description: Describes the id of the research purpose election related to this pending case, if it exists
        rpVoteId:
          type: integer
          format: int32
          description: Describes the id of the research purpose vote, related to this particular pending case, if it exists
    Summary:
      type: object
      properties:
        reviewedPositiveCases:
          type: integer
          format: int32
          description: Describes the number of cases that were denied.
        reviewedNegativeCases:
          type: integer
          format: int32
          description: Describes the number of cases that were approved.
        pendingCases:
          type: integer
          format: int32
          description: Describes the number of cases that are opened and have to be reviewed.
    Election:
      type: object
      properties:
        electionId:
          type: integer
          format: int32
          description: Describes the id of the election.
        electionType:
          type: string
          description: Describes the type of the election.
        finalVote:
          type: boolean
          description: Describes the chairperson final vote, if the election is closed.
        status:
          type: string
          description: Describes the status of the election. Open, Closed or Cancelled.
        createDate:
          type: string
          format: date
          description: Describes the date the election was created.
        lastUpdate:
          type: string
          format: date
          description: Describes the date the election was last modified.
        finalVoteDate:
          type: string
          format: date
          description: Describes the date the chaiperson made the final vote.
        referenceId:
          type: string
          description: Describes the id of the consent/data access request the election is related to.
        finalRationale:
          type: string
          description: If the final vote is NO, the chairperson can specify why in this field.
        finalAccessVote:
          type: boolean
          description: For Data Access Request only. Final vote that determines if the request is approved or denied.
        useRestriction:
          type: string
          description: The use restriction related to the election.
        translatedUseRestriction:
          type: string
          description: The translated use restriction related to the election.
        dataSetId:
          type: integer
          description: The dataSetId related to the election.
        displayId:
          type: string
          description: The ID for display.
        dulName:
          type: string
          description: Contains the correspondant Dul name for the given election.
        version:
          type: integer
          format: int32
          description: Indicates the version number of the given election.
        archived:
          type: boolean
          description: Determines if the election is archived.
    ConsentManage:
      type: object
      properties:
        consentId:
          type: string
          description: The consent ID of the case.
        consentName:
          type: string
          description: The consent name of the case.
        editable:
          type: boolean
          description: If the consent manage is editable.
        electionStatus:
          type: string
          description: The status of the election related to the consent.
        electionId:
          type: integer
          description: The electionId of the election related to the consent.
        createDate:
          type: string
          format: date-time
          description: The datetime the election was created.
        sortDate:
          type: string
          format: date-time
          description: The datetime the election was created/updated (the last updated).
        updateStatus:
          type: boolean
          description: Indicates if a consent has been updated from orsp
    Collaborator:
      type: object
      description: |
        A Collaborator on a Data Access Request. Collaborators are either internal lab staff or
        internal collaborators.
      properties:
        approverStatus:
          type: boolean
          description: |
            Collaborator downloader/approver status. This is relevant for internal lab staff that
            will have a status as "Designated Downloader/Approver". This indication is limited to
            individuals who the PI designates to download and/or share the requested data with other
            internal lab staff, i.e. staff members and trainees under the direct supervision of the PI
        email:
          type: string
          description: Collaborator email
        eraCommonsId:
          type: string
          description: Collaborator era commons id
        name:
          type: string
          description: Collaborator name
        title:
          type: string
          description: Collaborator title
        uuid:
          type: string
          description: Optional uuid for this collaborator
    DataAccessRequest:
      type: object
      description: Data Access Request
      properties:
        referenceId:
          type: string
          description: The reference id for this DAR. Not modifiable once created.
        userId:
          type: integer
          description: Describes the id of the User. Not modifiable once created.
        createDate:
          type: number
          description: Creation Date
        sortDate:
          type: number
          description: Sort Date
        submissionDate:
          type: number
          description: Submission Date
        updateDate:
          type: number
          description: Update Date
        draft:
          type: boolean
          description: Draft status of this DAR
        darCode:
          type: string
          description: Unique DAR Code
        partialDarCode:
          type: string
          description: Unique Partial DAR Code
        projectTitle:
          type: string
          description: Project Title
        datasetIds:
          type: array
          items:
            type: string
          description: Array of Dataset Ids
        rus:
          type: string
          description: Describes the Research Use Statement
        nonTechRus:
          type: string
          description: Describes the Non Technical Summary
        diseases:
          type: boolean
          description: Defines if the purpose of the study is disease-related
        methods:
          type: boolean
          description: Defines if the purpose of the study is for Methods development
        controls:
          type: boolean
          description: Defines if the purpose of the study is to increase the number of controls available for a comparison group
        population:
          type: boolean
          description: Defines if the purpose of the study is to understand variation in the general population
        other:
          type: boolean
          description: Defines if the purpose of the study is other than the above
        otherText:
          type: string
          description: Describes above field
        ontologies:
          type: array
          description: Array of ontology terms
          items:
            type: string
        forProfit:
          type: boolean
          description: Describes if data will be used for commercial purposes
        oneGender:
          type: boolean
          description: Describes if study is gender specific
        gender:
          type: string
          description: F/M if oneGender is specified
        pediatric:
          type: boolean
          description: Describes if study is restricted to a pediatric population
        illegalBehavior:
          type: boolean
          description: If TRUE, triggers MANUAL REVIEW.
        addiction:
          type: boolean
          description: If TRUE, triggers MANUAL REVIEW
        sexualDiseases:
          type: boolean
          description: If TRUE, triggers MANUAL REVIEW
        stigmatizedDiseases:
          type: boolean
          description: If TRUE, triggers MANUAL REVIEW
        vulnerablePopulation:
          type: boolean
          description: If TRUE, triggers MANUAL REVIEW
        populationMigration:
          type: boolean
          description: If TRUE, triggers MANUAL REVIEW
        psychiatricTraits:
          type: boolean
          description: If TRUE, triggers MANUAL REVIEW
        notHealth:
          type: boolean
          description: If TRUE, triggers MANUAL REVIEW
        hmb:
          type: boolean
          description: HMB Research
        poa:
          type: boolean
          description: Populations Origins Ancestry Research
        anvilUse:
          type: boolean
          description: Anvil Use
        cloudUse:
          type: boolean
          description: Cloud Use
        cloudProvider:
          type: string
          description: Cloud Use Provider
        cloudProviderType:
          type: string
          description: Cloud Use Provider Type
        geneticStudiesOnly:
          type: boolean
          description: Genetic Studies Only
        irb:
          type: boolean
          description: IRB Approval Required
        irbDocumentLocation:
          type: string
          description: IRB Document Location
        irbProtocolExpiration:
          type: string
          description: IRB Protocol Expiration
        publication:
          type: boolean
          description: Publication Required
        collaboration:
          type: boolean
          description: Collaboration Required
        collaborationLetterLocation:
          type: string
          description: Collaboration Letter Location
        forensicActivities:
          type: boolean
          description: Study involves Forensic Activities
        sharingDistribution:
          type: boolean
          description: Study requires sharing distribution
        externalCollaborators:
          type: array
          description: |
            External Collaborators are not employees of the Requesting PI's institution and/or do not
            work at the same location as the PI, and consequently must be independently approved to
            access controlled-access data subject to the GDS Policy. External Collaborators must be
            at the PI or equivalent level and are not required to have a  Library Card in order to
            access data, although it is encouraged. Note, External Collaborators must submit an
            independant DAR approved by their Signing Official to collaborate on this project.
            External Collaborators will be able to add their Lab Staff, as needed, via their
            independent DAR. Approval of this DAR does not indicate approval of the External
            Collaborators listed.
          items:
            $ref: '#/components/schemas/Collaborator'
        internalCollaborators:
          type: array
          description: |
            Internal Collaborators are defined as individuals not under the direct supervision of the
            PO's research project involving controlled-access data subject to the NIH GDS Policy.
            They are employees of the requesting PI's institution and work at the same location/campus
            as the PI. Internal Collaborators must be at the PI or equivalent level and are required
            to have a Library Card in order to access data through this request. Internal
            Collaborators will have Data Downloader/Approval status so that they may add their own
            relevant Internal Lab Staff. Internal Collaborators will not be required to submit an
            independent DAR to collaborate on this project.
          items:
            $ref: '#/components/schemas/Collaborator'
        labCollaborators:
          type: array
          description: |
            Lab Collaborators are defined as users of data from this Data Access Request,
            including any data that are downloaded or utilized in the cloud.
          items:
            $ref: '#/components/schemas/Collaborator'
    DataAccessRequestManage:
      type: object
      properties:
        referenceId:
          type: string
          description: The reference ID that identifies the case
        logged:
          type: string
          description: Describes the logged votes vs. total votes required.
        alreadyVoted:
          type: boolean
          description: Describes if the user already voted on this case
        isReminderSent:
          type: boolean
          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.
        isFinalVote:
          type: boolean
          description: If the user is chairperson, this will be false if the final vote is not logged yet, true otherwise.
        status:
          type: string
          description: Status of the vote. Pending or editable.
        voteId:
          type: integer
          format: int32
          description: Describes the id of the users vote, related to this particular pending case.
        totalVotes:
          type: integer
          format: int32
          description: Describes the total votes(users) required to vote for this election.
        votesLogged:
          type: integer
          format: int32
          description: Votes already logged in this pending case. Equal to the total of users that voted minus the ones that didnt.
        rpElectionId:
          type: integer
          format: int32
          description: Describes the id of the research purpose election related to this pending case, if it exists
        rpVoteId:
          type: integer
          format: int32
          description: Describes the id of the research purpose vote, related to this particular pending case, if it exists
        electionStatus:
          type: string
          description: The status of the election.
        rus:
          type: string
          description: The rus of the Data Access Request.
        dataRequestId:
          type: string
          description: The ID of the Data Access Request.
        projectTitle:
          type: string
          description: The title of the project, in the Data Access Request
        frontEndId:
          type: string
          description: The front end ID for the case
        electionId:
          type: integer
          format: int32
          description: The ID of the election related to the DAR.
        createDate:
          type: string
          format: date-time
          description: The Date the election was created.
        sortDate:
          type: string
          format: date
          description: The datetime the election was created/updated (the last one).
        electionVote:
          type: boolean
          description: Result of the election
        isCanceled:
          type: boolean
          description: The DAR is canceled
        needsApproval:
          type: boolean
          description: The DAR requires Data Owners approval
        dataSetElectionResult:
          type: string
          description: Result of the Data Owners elections.
        datasetId:
          type: integer
          format: int32
          description: The ID of the dataset for this DAR.
        dacId:
          type: integer
          format: int32
          description: The ID of the DAC for this DAR's dataset.
        errors:
          type: array
          items:
            type: string
          description: List of any structural errors with this DAR
        ownerUser:
          description: The owner of the DAR
          type: object
          items:
            $ref: '#/components/schemas/User'
    Dataset:
      type: object
      properties:
        dataSetId:
          type: integer
          format: int32
          description: The dataset id, integer format
        consentId:
          type: string
          description: The consent id.
        translatedUseRestriction:
          type: string
          description: The Use Restriction, readable type
        deletable:
          type: boolean
          description: Describes if this DataSet can be deleted (This information is only given to the Admin).
        properties:
          type: array
          items:
            $ref: '#/components/schemas/DatasetProperty'
        active:
          type: boolean
          description: The Dataset is active
        needsApproval:
          type: boolean
          description: The Dataset need Data Owners approval
        isAssociatedToDataOwners:
          type: boolean
          description: The Dataset is associated to a data owner
        updateAssociationToDataOwnerAllowed:
          type: boolean
          description: You can update the data owners of this Dataset
        alias:
          type: string
          description: The dataset id, string format
        objectId:
          type: string
          description: The sample collection ID, if defined
    DatasetProperty:
      type: object
      properties:
        propertyName:
          type: string
          description: Name of the Property.
        propertyValue:
          type: string
          description: Value of the Property.
    DatasetAssociation:
      type: object
      properties:
        datasetId:
          type: integer
          description: The dataset id
        dacuserId:
          type: integer
          description: The user id
        createDate:
          type: string
          description: Association creation date
    DatasetAssociationMap:
      type: object
      properties:
        associated_users:
          description: Associated Users
          type: array
          items:
            $ref: '#/components/schemas/User'
        not_associated_users:
          description: Non-associated Users
          type: array
          items:
            $ref: '#/components/schemas/User'
    Dictionary:
      type: object
      properties:
        keyId:
          type: integer
          format: int32
          description: Id of the key.
        key:
          type: integer
          format: int32
          description: Value of the key.
        required:
          type: boolean
          description: Defines if this attribute is required to create a Dataset
        displayOrder:
          type: integer
          format: int32
          description: Defines the position of the attribute in the .tsv file
        createDate:
          type: string
          format: date
          description: Describes the date the Dictionary was created.
        receiveOrder:
          type: integer
          format: int32
          description: The display order of the properties.
    ElectionReview:
      type: object
      properties:
        reviewVote:
          type: array
          items:
            $ref: '#/components/schemas/ElectionReviewVote'
          description: Votes related to the Election.
        election:
          $ref: '#/components/schemas/Election'
        consent:
          $ref: '#/components/schemas/Consent'
        voteAgreement:
          $ref: '#/components/schemas/Vote'
        finalVote:
          $ref: '#/components/schemas/Vote'
        rpElectionId:
          type: integer
          description: The research purpose ID.
    ElectionReviewVote:
      type: object
      properties:
        Vote:
          $ref: '#/components/schemas/Vote'
        displayName:
          type: string
          description: Name of the voter.
        email:
          type: string
          description: Email of the voter.
    Dac:
      type: object
      properties:
        dacId:
          type: integer
          description: The DAC Id
        name:
          type: string
          description: The DAC Name
        description:
          type: string
          description: The DAC Description
        createDate:
          type: string
          format: date
          description: Date created
        updateDate:
          type: string
          format: date
          description: Date last updated
        chairpersons:
          description: List of Chairpersons
          type: array
          items:
            $ref: '#/components/schemas/User'
        members:
          description: List of Members
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        dacUserId:
          type: integer
          description: ID of the user
        email:
          type: string
          description: Email of the user
        emailPreference:
          type: boolean
          description: The user wants email notifications.
        displayName:
          type: string
          description: Name of the user
        createDate:
          type: string
          format: date
          description: Describes the date the User was created.
        status:
          type: string
          description: Status of the user, approved or not.
        rationale:
          type: string
          description: Reason why the role was not approved.
        profileCompleted:
          type: boolean
          description: The profile is completed. Researchers only.
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    UserRole:
      type: object
      properties:
        roleId:
          type: integer
          format: int32
          description: ID of the role
        name:
          type: string
          description: Name of the role
    ErrorResponse:
      properties:
        message:
          type: string
          description: The error message
        code:
          type: integer
          description: The response status code
    OntologyFileMetaData:
      type: object
      properties:
        prefix:
          type: string
          description: The prefix of the ontology file, i.e. "DUOS", "DOID", etc.
        type:
          type: string
          description: The allowed type of ontology file, i.e. "Organization" or "Disease"
    OntologyFile:
      type: object
      properties:
        ontology_file:
          $ref: '#/components/schemas/OntologyFileMetaData'
    Version:
      type: object
      properties:
        hash:
          type: string
          description: Current short hash of this version
        version:
          type: string
          description: Current version
