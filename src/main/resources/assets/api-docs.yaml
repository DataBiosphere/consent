openapi: 3.0.3

info:
  title: Consent
  description: |
    The primary API layer for the Data Use Oversight System DUOS
    ## Data Use Oversight System
    A semi-automated management service for compliant secondary use of
    human genomics data There are restrictions on researching human genomics data.
    For example: “Data can only be used for breast cancer research with non-commercial
    purpose”. The Data Use Oversight system ensures that researchers using genomics
    data honor these restrictions.
  version: 1.0.1
  license:
    name: BSD
    url: http://opensource.org/licenses/BSD-3-Clause
  termsOfService: https://github.com/DataBiosphere/consent

servers:
  - url: /

security:
  - googleoauth:
      - email
      - profile

paths:
  /api/collections:
    $ref: './paths/collections.yaml'
  /api/collections/{collectionId}:
    $ref: './paths/collection.yaml'
  /api/collections/dar/{referenceId}:
    $ref: './paths/collectionByReferenceId.yaml'
  /api/collections/role/{roleName}:
    $ref: './paths/collectionsByRoleName.yaml'
  /api/collections/role/{roleName}/summary:
    $ref: './paths/collectionsByRoleNameSummary.yaml'
  /api/collections/role/{roleName}/summary/{collectionId}:
    $ref: './paths/collectionsForRoleNameByIdSummary.yaml'
  /api/collections/{collectionId}/cancel:
    $ref: './paths/cancelCollectionByCollectionId.yaml'
  /api/collections/{collectionId}/election:
    $ref: './paths/createCollectionElectionsByCollectionId.yaml'
  /api/collections/{collectionId}/resubmit:
    $ref: './paths/resubmitCollectionByCollectionId.yaml'
  /api/mail/type/{type}:
    $ref: './paths/mailByType.yaml'
  /api/mail/range:
    $ref: './paths/mailByRange.yaml'
  /api/consent/cases/summary:
    get:
      summary: Get Consent Summary Cases
      description: Returns number of denied, approved and pending cases.
      tags:
        - Consent Summary
      responses:
        200:
          description: Returns the summary of cases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/consent/cases/summary/file:
    $ref: './paths/consentCasesSummaryFile.yaml'
  /api/consent:
    $ref: './paths/consent.yaml'
  /api/consent/{id}:
    get:
      deprecated: true
      summary: Get Consent by ID
      description: Returns the consent identified by the ID.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: Returns the requested consent.
          content:
            application/json:
              schema:
                $ref: './schemas/Consent.yaml'
        404:
          description: The consent associated with the ID couldn't be found.
    put:
      summary: Update Consent by ID
      description: Updates the consent identified by the ID.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: updated
          in: body
          description: Object that represents the consent to be updated
          required: true
          schema:
            $ref: './schemas/Consent.yaml'
      tags:
        - Consent
      responses:
        200:
          description: Returns the requested consent.
          content:
            application/json:
              schema:
                $ref: './schemas/Consent.yaml'
        400:
          description:
            Consent updates are only allowed when
              1-There have been no previous elections created for this consent
              2-The most recent election has been closed/cancelled AND archived
        404:
          description: The consent associated with the ID couldn't be found.
        500:
          description: Internal server error
  /api/consent/{id}/matches:
    get:
      summary: getMatches
      description: Returns the matches that are related to this consent.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
      tags:
        - Match
        - Consent
      responses:
        200:
          description: Returns a list of matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
        404:
          description: The consent for the id couldn't be found.
  /api/dac:
    $ref: 'paths/dac.yaml'
  /api/dac/{dacId}:
    $ref: 'paths/dacById.yaml'
  /api/dac/{dacId}/dataset/{datasetId}:
    $ref: 'paths/approveDataset.yaml'
  /api/dac/{dacId}/member/{userId}:
    post:
      summary: Add DAC Member
      operationId: addDacMember
      description: Adds a User as a Member to a Data Access Committee
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The added DAC Member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: No DAC or User found with the provided ID
        409:
          description: User is already a member of the DAC
        500:
          description: Internal Server Error
    delete:
      summary: Remove DAC Member
      operationId: removeDacMember
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: Dac member successfully removed
        404:
          description: No DAC or User found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/chair/{userId}:
    post:
      summary: Add DAC Chair
      operationId: addDacChair
      description: Adds a User as a Chairperson to a Data Access Committee
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The added DAC Chairperson
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: No DAC or User found with the provided ID
        409:
          description: User is already a member of the DAC
        500:
          description: Internal Server Error
    delete:
      summary: Remove DAC Chairperson
      operationId: removeDacChair
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: Dac chairperson successfully removed
        400:
          description: Dacs require at least one chair.
        404:
          description: No DAC or User found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/datasets:
    $ref: './paths/datasetsByDacId.yaml'
  /api/dac/users/{term}:
    get:
      summary: Find Users by Search Term
      operationId: findUsersByTerm
      description: Find all users that match the search term. Matches on name and email address.
      parameters:
        - name: term
          in: path
          description: The Search Term
          required: true
          schema:
            type: string
      tags:
        - DAC
      responses:
        200:
          description: The list of users matching the term
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/User'
        500:
          description: Internal Server Error
  /api/dacuser:
    $ref: './paths/dacuser.yaml'
  /api/dar/v2:
    $ref: './paths/darV2.yaml'
  /api/dar/v2/{referenceId}:
    $ref: './paths/darV2ByReferenceId.yaml'
  /api/dar/v2/draft:
    post:
      summary: Create Draft Data Access Request
      description: Create Draft Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a Data Access Request, json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the created draft Data Access Request.
        500:
          description: Internal Server Error.
    get:
      summary: Get all Draft Data Access Requests
      description: Returns a list of all Draft Data Access Request
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns a list of Draft Data Access Requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/DataAccessRequest.yaml'
        500:
          description: Internal Server Error.
  /api/dar/v2/draft/{referenceId}:
    put:
      summary: Update Draft Data Access Request
      description: Update Draft Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
        - name: dar
          in: body
          description: The fields that represent a Data Access Request, json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the upated draft Data Access Request.
        403:
          description: Updates are restricted to the create user.
        500:
          description: Internal Server Error.
    get:
      summary: Get a Draft Data Access Request
      description: Returns the Draft Data Access Request specified by the referencId
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the draft Data Access Request.
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'
        500:
          description: Internal Server Error.
  /api/dar/v2/{referenceId}/irbDocument:
    get:
      summary: Retrieve DAR IRB Document
      description: Retrieve the IRB Document for a Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Store DAR IRB Document
      description: |
        Store an IRB Document for a Data Access Request.
        Previous document is deleted.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      tags:
        - Data Access Request
      responses:
        200:
          description: Stores the document and returns the updated Data Access Request
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'
  /api/dar/v2/{referenceId}/collaborationDocument:
    get:
      summary: Retrieve DAR Collaboration Document
      description: Retrieve the Collaboration Document for a Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Store DAR Collaboration Document
      description: |
        Store a Collaboration Document for a Data Access Request.
        Previous document is deleted.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      tags:
        - Data Access Request
      responses:
        200:
          description: Stores the document and returns the updated Data Access Request
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'

  /api/dar:
    post:
      summary: createdDataAccessRequest
      description: |
        DEPRECATED: Use POST /api/dar/v2
        Creates a Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a DAR, json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the created Data Access Request, json file.
        500:
          description: Internal Server Error.
  /api/dar/partial:
    post:
      summary: Create Partial Data Access Request
      description: |
        DEPRECATED: Use POST /api/dar/v2/draft
        Create Partial Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a DAR, json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the created partial Data Access Requests
        500:
          description: Internal Server Error.
    put:
      summary: Update Partial Data Access Request
      description: |
        DEPRECATED: Use PUT /api/dar/v2/draft/{referenceId}:
        Update Partial Data Access Request
      parameters:
        - name: dar
          in: body
          description: |
            The fields that represent a DAR, json format.
            Must contain a `referenceId` for the updated DAR.
            User must be the creator of the DAR.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the updated partial Data Access Request, json file.
        403:
          description: Forbidden
        404:
          description: DAR or User Not Found
        500:
          description: Internal Server Error.
  /api/dar/partial/{id}:
    delete:
      summary: Delete Partial Data Access Request
      description: Delete Partial Data Access Request
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Data Access Request was deleted
        403:
          description: Forbidden
        500:
          description: Internal Server Error.
  /api/dataRequest/cases/summary/DataAccess:
    get:
      summary: getConsentSummaryCases
      description: Retrieves the Summary of DAR cases
      tags:
        - Summary
        - Data Access Request
      responses:
        200:
          description: A summary of cases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/dataRequest/cases/summary/RP:
    get:
      summary: getConsentSummaryCases
      description: Retrieves the Summary of Research Purposes cases
      tags:
        - Summary
        - Research Purpose
      responses:
        200:
          description: A summary of cases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/dataRequest/approved:
    get:
      summary: Get a list of approved DARs
      description: Get a list of approved DARs
      tags:
        - Data Access Request
      responses:
        200:
          description: A list of approved DARs
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/dataRequest/reviewed:
    get:
      summary: Get a list of reviewed DARs
      description: Get a list of reviewed DARs
      tags:
        - Data Access Request
      responses:
        200:
          description: A list of reviewed DARs
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/dataset:
    get:
      summary: Get Datasets
      description: Returns Dataset list filtered by authenticated user.
      deprecated: true
      tags:
        - Dataset
      responses:
        200:
          description: A list of Datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/Dataset.yaml'

  /api/dataset/v2:
    $ref: './paths/datasetV2.yaml'
  /api/dataset/v3:
    $ref: './paths/datasetV3.yaml'
  /api/dataset/validate:
    get:
      summary: validateDatasetName
      description: Returns the dataset id if one exists for the given name (ignores case).
      parameters:
        - name: name
          in: query
          description: The name of the dataset to search for.
          required: true
          schema:
            type: string
      tags:
        - Dataset
      responses:
        200:
          description: dataset id
          content:
            application/json:
              schema:
                type: integer
        404:
          description: Dataset not found
  /api/dataset/studyNames:
    $ref: './paths/findAllStudyNames.yaml'
  /api/dataset/sample:
    get:
      summary: getDataSetSample
      description: Returns a Dataset sample .tsv file.
      tags:
        - Dataset
      responses:
        200:
          description: .tsv sample
          content:
            text/plain:
              schema:
                type: string
          headers:
            Content-type:
              schema:
                type: string
              description: text/plain
            Content-Disposition:
              schema:
                type: string
              description: attachment; filename=DataSetSample.tsv
        500:
          description: Server error.
  /api/dataset/dictionary:
    get:
      summary: describeDictionary
      description: Return all the values that compound the dictionary , this values are the attributes of a Dataset.
      tags:
        - Dataset
      responses:
        200:
          description: An array of the existent dictionaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dictionary'
        500:
          description: Server error.
  /api/dataset/{id}:
    $ref: './paths/datasetById.yaml'
  /api/dataset/{id}/datause:
    $ref: './paths/datasetByIdDataUse.yaml'
  /api/dataset/v2/{id}:
    $ref: './paths/datasetByIdV2.yaml'
  /api/dataset/batch:
    $ref: './paths/datasetBatch.yaml'
  /api/dataset/{id}/approved/users:
    $ref: './paths/datasetByIdApprovedUsers.yaml'
  /api/dataset/download:
    post:
      summary: Download datasets by id list
      description: Returns the dataset Properties of the datasets whose Ids are in the idList
      requestBody:
        description: List of Dataset Ids
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      tags:
        - Dataset
      responses:
        200:
          description: The specified datasets were downloaded.
        500:
          description: Server error.
  /api/dataset/search:
    $ref: './paths/datasetSearch.yaml'
  /api/dataset/autocomplete/{partial}:
    get:
      deprecated: true
      summary: datasetAutocomplete
      description: Returns Dataset list with the Datasets whose objectsIds matches with the partial string.
      parameters:
        - name: partial
          in: path
          description: the value to autocomplete.
          required: true
          schema:
            type: string
      tags:
        - Dataset
      responses:
        200:
          description: An array of Dataset objectIds
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Server error.
  /api/dataset/disable/{id}/{active}:
    $ref: './paths/datasetDisableById.yaml'
  /api/datasetAssociation/{datasetId}:
    get:
      summary: Get Dataset Associations
      description: Get all dataset associations
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
      tags:
        - Dataset
      responses:
        200:
          description: Map of associated and non-associated users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetAssociationMap'
    post:
      summary: Create Dataset Associations
      operationId: Create dataset associations for the provided dataset and users
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
        - name: userIdList
          in: body
          description: list of user ids
          required: true
          schema:
            type: array
            items:
              type: integer
      tags:
        - Dataset
      responses:
        201:
          description: An array of created dataset associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetAssociation'
    put:
      summary: Update Dataset Associations
      operationId: Update dataset associations for the provided dataset and users
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
        - name: userIdList
          in: body
          description: list of user ids
          required: true
          schema:
            type: array
            items:
              type: integer
      tags:
        - Dataset
      responses:
        200:
          description: An array of updated dataset associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetAssociation'
  /api/tdr/{identifier}/approved/users:
    $ref: './paths/tdrDatasetApprovedUsers.yaml'
  /api/tdr/{identifier}:
    $ref: './paths/tdrDataset.yaml'
  /api/tdr/dar/draft:
    $ref: './paths/tdrDraftDAR.yaml'
  /api/election/{id}:
    get:
      summary: describeElectionById
      description: Returns the Election identified by Id.
      parameters:
        - name: id
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
      tags:
        - Election
      responses:
        200:
          description: Election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        400:
          description: Could not find Election with the specified Id
  /api/election/{electionId}/votes:
    get:
      summary: get the votes on the election specified by the electionId
      description: Returns the list of votes associated with the election identified by Id
      parameters:
        - name: electionId
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
      tags:
        - Election
      responses:
        200:
          description: List of votes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        404:
          description: Could not find Election with the specified Id
        500:
          description: Internal Server Error
    put:
      summary: updateElection
      description: "Updates the election specified by Id."
      parameters:
        - name: id
          in: path
          description: Id of the Election to Update
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          description: Updated Election.
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
      responses:
        200:
          description: updated Election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        400:
          description: Illegal Argument Exception
  /api/election/{referenceId}/advance/{vote}:
    post:
      summary: Advance Elections
      description: Advance all incomplete votes in any elections on the reference.
      operationId: advanceElections
      parameters:
        - name: referenceId
          in: path
          description: referenceId for the Elections
          required: true
          schema:
            type: string
        - name: vote
          in: path
          description: Vote value for all votes in the Elections
          required: true
          schema:
            type: string
            enum:
              - Yes
              - No
      tags:
        - Election
      responses:
        200:
          description: All incomplete votes for the elections have been advanced.
        500:
          description: Server error.
  /api/emailNotifier/reminderMessage/{voteId}:
    post:
      summary: Send Reminder Email
      description: Send a reminder email to the owner of a vote
      parameters:
        - name: voteId
          in: path
          description: String value of the vote id for a user's vote in an election
          required: true
          schema:
            type: string
      tags:
        - Notifier
      responses:
        200:
          description: Email successfully sent
        500:
          description: Server error.

  /api/institutions:
    $ref: './paths/institutions.yaml'
  /api/institutions/{id}:
    $ref: './paths/institutionById.yaml'
  /api/libraryCards:
    get:
      summary: Library Card INDEX resource
      description: Returns all saved library cards
      tags:
        - Library Card
        - Admin
      responses:
        200:
          description: Library Card INDEX request success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        401:
          description: User not authorized
        500:
          description: Internal server error
    post:
      summary: Library Card CREATE resource
      description: Creates a new Library Card based on user-provided json
      requestBody:
        description: JSON representation of libraryCard payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryCard'
      tags:
        - Library Card
        - Admin
      responses:
        201:
          description: Library Card CREATE success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        400:
          description: Bad request (Issues with json payload)
        401:
          description: User not authorized
        409:
          description: Library Card payload conflicts with an existing record
        500:
          description: Internal server error
  /api/libraryCards/{id}:
    get:
      summary: Library Card GET Resource
      description: Fetch library card bases on id parameter
      tags:
        - Library Card
        - Admin
      parameters:
      - name: id
        in: path
        description: Library Card ID
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Library Card GET success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        401:
          description: User not authorized
        404:
          description: Library Card not found
        500:
          description: Internal server error
    put:
      summary: Library Card PUT resource
      description: Update target Library Card based on id parameter and user provided json
      tags:
        - Library Card
        - Admin
      parameters:
      - name: id
        in: path
        description: Library Card ID
        required: true
        schema:
          type: integer
      requestBody:
          description: 'JSON representation of updated Library Card state'
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
      responses:
        200:
          description: Library Card PUT request success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        400:
          description: Bad request (Issues with json payload)
        401:
          description: User not authorized
        404:
          description: Library Card not found
        409:
          description: Library Card payload conflicts with an existing record
        500:
          description: Internal server error
    delete:
      summary: Library Card DELETE resource
      description: Delete target Library Card based on id parameter
      tags:
        - Library Card
        - Admin
      parameters:
      - name: id
        in: path
        description: Library Card ID
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Library Card DELETE request success
        401:
          description: User not authorized
        404:
          description: Library Card not found
        500:
          description: Internal server error
  /api/libraryCards/institution/{id}:
    get:
      summary: Library Card GET based on Institution ID
      description: Returns all Library Cards with institution_id equal to provided id
      tags:
        - Library Card
        - Institutions
      parameters:
      - name: id
        in: path
        description: Institution ID
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Library Card GET request success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        401:
          description: User not authorized
        404:
          description: Institution not found
        500:
          description: Internal server error
  /api/match/reprocess/purpose/{purposeId}:
    post:
      summary: Process all matches for this research purpose (DAR) id
      description: Process all matches for this research purpose (DAR) id
      tags:
        - Data Access Request
        - Match
      parameters:
        - name: purposeId
          in: path
          description: Data Access Request (or research purpose) ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns a list of reprocessed match results of the Data Access Request. If no results are found, no data is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResult'
        500:
          description: Server error.
  /api/match/purpose/batch/:
    $ref: './paths/getMatchesForLatestDataAccessElectionsByPurposeIds.yaml'
  /api/user:
    $ref: './paths/user.yaml'
  /api/user/me:
    get:
      summary: Find currently authenticated user
      description: Find currently authenticated user
      tags:
        - User
      responses:
        200:
          description: The user, along with researcher properties and library cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Server error.
  /api/user/me/dac/datasets:
    $ref: './paths/getDatasetsFromUserDacs.yaml'
  /api/user/me/dac/datasets/v2:
    $ref: './paths/getDatasetsFromUserDacsV2.yaml'
  /api/user/institution/{institutionId}:
    $ref: './paths/userInstitutionByInstitutionId.yaml'
  /api/user/institution/unassigned:
    get:
      summary: Find users that do not belong to an institution
      description: Find users that do not belong to an institution
      tags:
        - User
      responses:
        200:
          description: An array of users that do not belong to an institution
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Internal Server Error
  /api/user/signing-officials:
    get:
      summary: Find SOs for currently authenticated user's institution
      description: Return list of SOs belonging to the same institution as currently authenticated user
      tags:
        - User
      responses:
        200:
          description: The users with the same institutionId and SO Role
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimplifiedUser'
        404:
          description: User not found
        500:
          description: Server error.
  /api/user/{userId}:
    $ref: './paths/userByIdv2.yaml'
  /api/user/role/{roleName}:
    get:
      summary: Get a list of users that you have access to based on your role
      description: Finds users based on the user role and permissions
      parameters:
        - name: roleName
          in: path
          description: The name of the role of the user
          schema:
            type: string
            required: true
            enum: [Admin, SigningOfficial]
      tags:
        - User
      responses:
        200:
          description: The list of users, along with their roles, does not include properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Unsupported or Invalid role name
        404:
          description: The user does not have the given role, or role is SO and the user does not have an Institution
        500:
          description: Server error.
  /api/user/{userId}/{roleId}:
    $ref: './paths/userRole.yaml'
  /api/user/{email}:
    delete:
      summary: Delete User by email
      description: Deletes the user identified by the email.
      parameters:
        - name: email
          in: path
          description: The email of the user.
          required: true
          schema:
            type: string
      tags:
        - User
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
  /api/user/acknowledgements/{key}:
    get:
      summary: Get Acknowledgement by key
      description: Obtains a specific acknowledgement by acknowledgement key.
      parameters:
        - name: key
          in: path
          description: The name of the key.
          required: true
          schema:
            type: string
      tags:
        - User
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
        401:
          description: Unauthorized, log in and try the operation again.
        404:
          description: No acknowledgement found for the given key.
        500:
          description: Error processing the request.
    delete:
      summary: ADMIN ONLY - Delete Acknowledgement by key
      description: Deletes a specific acknowledgement for the current user by acknowledgement key.  Returns the deleted acknowledgement.
      parameters:
        - name: key
          in: path
          description: The name of the key.
          required: true
          schema:
            type: string
      tags:
        - User
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
        401:
          description: Unauthorized, log in and try the operation again.
        404:
          description: No acknowledgement found for the given key.
        500:
          description: Error processing the request.
  /api/user/acknowledgements:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["key1", "key2", "key3"]
      tags:
        - User
      summary: Set acknowledgements for a user
      description: Records an acknowledgement record for each entry supplied
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcknowledgementMap'
        400:
          description: The request isn't in the proper format.
        401:
          description: Unauthorized, log in and try the operation again.
        500:
          description: Error processing the request.
    get:
      tags:
        - User
      summary: Obtains all acknowledgements for a user
      description: Obtains an acknowledgement record for each entry supplied.  Missing entries will not have a key in the response
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcknowledgementMap'
        401:
          description: Unauthorized, log in and try the operation again.
        500:
          description: Error processing the request.
  /api/nih:
    delete:
      summary: Delete Era Commons Account
      description: Removes only Era Commons Account related information from the logued user, requesting this action
      tags:
        - User
        - eRA Commons
        - Nih
      responses:
        200:
          description: Returns an empty response if the operation was successful
    post:
      summary: Store NIH information
      description: Save user's eRA Commons account
      parameters:
        - name: nihAccount
          in: body
          description: NIH Account information
          required: true
          schema:
            $ref: '#/components/schemas/NIHUserAccount'
      tags:
        - User
        - eRA Commons
        - Nih
      responses:
        200:
          description: Returns eRA Commons Account information. Map<String, String> format
        404:
          description: The user doesn't exist in the system
  /api/sam/register/self:
    $ref: './paths/samRegisterSelf.yaml'
  /api/sam/register/self/diagnostics:
    $ref: './paths/samRegisterSelfDiagnostics.yaml'
  /api/sam/register/self/info:
    $ref: './paths/samRegisterSelfInfo.yaml'
  /api/sam/register/self/tos:
    $ref: './paths/samRegisterSelfTos.yaml'
  /api/sam/resource-types:
    $ref: './paths/samResourceTypes.yaml'
  /api/votes:
    $ref: './paths/votes.yaml'
  /api/votes/rationale:
    $ref: './paths/votesRationale.yaml'
  /metrics/dac/decision:
    get:
      summary: Dac Decision Metrics
      description: Dac Decision Metrics
      tags:
        - Metrics
      responses:
        200:
          description: Dac Decision Metrics
          content:
            text/plain:
              schema:
                type: string
        500:
          description: Internal Server Error
  /metrics/dar/decision:
    get:
      summary: DAR Decision Metrics
      description: DAR Decision Metrics
      tags:
        - Metrics
      responses:
        200:
          description: DAR Decision Metrics
          content:
            text/plain:
              schema:
                type: string
        500:
          description: Internal Server Error
  /metrics/dataset/{datasetId}:
    get:
      summary: Dataset Metrics
      description: get dars and elections associated with datasetId
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Metrics
      responses:
        200:
          description: Dataset Metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schema/DatasetMetrics'
        404:
          description: Dataset with specified ID does not exist
        500:
          description: Internal Server Error
  /liveness:
    $ref: './paths/liveness.yaml'
  /schemas/dataset-registration/v1:
    $ref: './paths/schemaDatasetRegistrationV1.yaml'
  /status:
    get:
      summary: System Health Status
      description: |
        A detailed description of the various subsystem statuses that Consent relies upon.
        Current systems include:
          * Elastic Search
          * GCS
          * Ontology
          * Postgres DB
          * Sam
          * Sendgrid
      tags:
        - Status
      responses:
        200:
          description: All systems are OK
        500:
          description: Some number of subsystems are not OK.
  /tos/text:
    $ref: './paths/tosText.yaml'
  /tos/text/duos:
    $ref: './paths/tosTextDuos.yaml'
  /version:
    get:
      summary: Current application version
      description: The current short hash and version of the application.
      tags:
        - Status
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        500:
          description: Internal Server Error
components:
  securitySchemes:
    googleoauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            email: email authorization
            profile: profile authorization
  schemas:
    Acknowledgement:
      type: object
      properties:
        userId:
          type: integer
          description: The User ID for the current user
        ackKey:
          type: string
          description: The name of the key
        firstAcknowledged:
          type: integer
          description: The date first acknowledged, in seconds since January 1, 1970
        lastAcknowledged:
          type: integer
          description: The date last acknowledged, in seconds since January 1, 1970
      example:
        userId: 1
        ackKey: "key1"
        firstAcknowledged: 1668461426
        lastAcknowledged: 1668461426
    AcknowledgementMap:
      type: object
      description: A map of keys to their associated Acknowledgement objects.
      additionalProperties:
        $ref: '#/components/schemas/Acknowledgement'
    Collaborator:
      $ref: './schemas/Collaborator.yaml'
    Consent:
      $ref: './schemas/Consent.yaml'
    ConsentAssociation:
      $ref: './schemas/ConsentAssociation.yaml'
    DarCollection:
      $ref: './schemas/DarCollection.yaml'
    Data Access Committee:
      $ref: './schemas/Dac.yaml'
    DataAccessRequest:
      $ref: './schemas/DataAccessRequest.yaml'
    Dataset:
      $ref: './schemas/Dataset.yaml'
    DatasetApproval:
      $ref: './schemas/DatasetApproval.yaml'
    DatasetProperty:
      $ref: './schemas/DatasetProperty.yaml'
    DatasetRegistrationSchemaV1:
      $ref: './schemas/DatasetRegistrationSchemaV1.yaml'
    Election:
      $ref: './schemas/Election.yaml'
    Institution:
      $ref: './schemas/Institution.yaml'
    LibraryCard:
      $ref: './schemas/LibraryCard.yaml'
    MailMessage:
      $ref: './schemas/MailMessage.yaml'
    PaginationResponse:
      $ref: './schemas/PaginationResponse.yaml'
    User:
      $ref: './schemas/User.yaml'
    UserProperty:
      $ref: './schemas/UserProperty.yaml'
    UserProperties:
      $ref: './schemas/UserProperties.yaml'
    UserRole:
      $ref: './schemas/UserRole.yaml'
    NIHUserAccount:
      type: object
      properties:
        nihUsername:
          type: string
          description: Nih account associated name.
        datasetPermissions:
          type: array
          items:
            type: string
          description: NIH dataset access permissions.
        status:
          type: string
          description: Flag to determine if a user is authorized.
        eraExpiration:
          type: string
          description: Contains the eRA account expiration date in miliseconds. This will be 30 days from the user's authentication.
    Vote:
      $ref: './schemas/Vote.yaml'
    MatchResult:
      $ref: './schemas/MatchResult.yaml'
    Match:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The ID of the entity.
        consent:
          type: string
          description: The matched consent.
        purpose:
          type: string
          description: The matched research purpose.
        match:
          type: boolean
          description: True if the entities match, false otherwise.
        failed:
          type: boolean
          description: True if the matching process failed, for any reason.
        createDate:
          type: string
          format: date
          description: Describes the date the match was created.
    Summary:
      type: object
      properties:
        reviewedPositiveCases:
          type: integer
          format: int32
          description: Describes the number of cases that were denied.
        reviewedNegativeCases:
          type: integer
          format: int32
          description: Describes the number of cases that were approved.
        pendingCases:
          type: integer
          format: int32
          description: Describes the number of cases that are opened and have to be reviewed.
    DataAccessRequestManage:
      type: object
      properties:
        dar:
          type: object
          description: The Data Access Request
        election:
          type: object
          description: The Election
        votes:
          type: array
          description: The Votes for the Election
        dac:
          type: object
          description: The DAC for the Election
        researcher:
          type: object
          description: The Researcher for the Data Access Request
        referenceId:
          type: string
          description: The reference ID that identifies the case
          deprecated: true
        logged:
          type: string
          description: Describes the logged votes vs. total votes required.
          deprecated: true
        alreadyVoted:
          type: boolean
          description: Describes if the user already voted on this case
          deprecated: true
        isReminderSent:
          type: boolean
          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.
          deprecated: true
        isFinalVote:
          type: boolean
          description: If the user is chairperson, this will be false if the final vote is not logged yet, true otherwise.
          deprecated: true
        status:
          type: string
          description: Status of the vote. Pending or editable.
          deprecated: true
        voteId:
          type: integer
          format: int32
          description: Describes the id of the users vote, related to this particular pending case.
          deprecated: true
        totalVotes:
          type: integer
          format: int32
          description: Describes the total votes(users) required to vote for this election.
          deprecated: true
        votesLogged:
          type: integer
          format: int32
          description: Votes already logged in this pending case. Equal to the total of users that voted minus the ones that didnt.
          deprecated: true
        rpElectionId:
          type: integer
          format: int32
          description: Describes the id of the research purpose election related to this pending case, if it exists
          deprecated: true
        rpVoteId:
          type: integer
          format: int32
          description: Describes the id of the research purpose vote, related to this particular pending case, if it exists
          deprecated: true
        electionStatus:
          type: string
          description: The status of the election.
          deprecated: true
        rus:
          type: string
          description: The rus of the Data Access Request.
          deprecated: true
        dataRequestId:
          type: string
          description: The ID of the Data Access Request.
          deprecated: true
        projectTitle:
          type: string
          description: The title of the project, in the Data Access Request
          deprecated: true
        frontEndId:
          type: string
          description: The front end ID for the case
          deprecated: true
        electionId:
          type: integer
          format: int32
          description: The ID of the election related to the DAR.
          deprecated: true
        createDate:
          type: string
          format: date-time
          description: The Date the election was created.
          deprecated: true
        sortDate:
          type: string
          format: date
          description: The datetime the election was created/updated (the last one).
          deprecated: true
        electionVote:
          type: boolean
          description: Result of the election
          deprecated: true
        isCanceled:
          type: boolean
          description: The DAR is canceled
          deprecated: true
        needsApproval:
          type: boolean
          description: The DAR requires Data Owners approval
          deprecated: true
        dataSetElectionResult:
          type: string
          description: Result of the Data Owners elections.
          deprecated: true
        datasetId:
          type: integer
          format: int32
          description: The ID of the dataset for this DAR.
          deprecated: true
        dacId:
          type: integer
          format: int32
          description: The ID of the DAC for this DAR's dataset.
          deprecated: true
        errors:
          type: array
          items:
            type: string
          description: List of any structural errors with this DAR
          deprecated: true
        ownerUser:
          description: The owner of the DAR
          deprecated: true
          type: object
          items:
            $ref: '#/components/schemas/User'
    DatasetAssociation:
      type: object
      properties:
        datasetId:
          type: integer
          description: The dataset id
        dacuserId:
          type: integer
          description: The user id
        createDate:
          type: string
          description: Association creation date
    DatasetAssociationMap:
      type: object
      properties:
        associated_users:
          description: Associated Users
          type: array
          items:
            $ref: '#/components/schemas/User'
        not_associated_users:
          description: Non-associated Users
          type: array
          items:
            $ref: '#/components/schemas/User'
    Dictionary:
      type: object
      properties:
        keyId:
          type: integer
          format: int32
          description: Id of the key.
        key:
          type: integer
          format: int32
          description: Value of the key.
        required:
          deprecated: true
          type: boolean
          description: Defines if this attribute is required to create a Dataset
        displayOrder:
          deprecated: true
          type: integer
          format: int32
          description: Defines the position of the attribute in the .tsv file
        receiveOrder:
          deprecated: true
          type: integer
          format: int32
          description: The display order of the properties.
    SimplifiedUser:
      $ref: './schemas/SimplifiedUser.yaml'
    SamSelfDiagnostics:
      $ref: './schemas/SamSelfDiagnostics.yaml'
    SamUserInfo:
      $ref: './schemas/SamUserInfo.yaml'
    ErrorResponse:
      properties:
        message:
          type: string
          description: The error message
        code:
          type: integer
          description: The response status code
    Version:
      type: object
      properties:
        hash:
          type: string
          description: Current short hash of this version
        version:
          type: string
          description: Current version
