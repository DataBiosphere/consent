openapi: 3.0.3

info:
  title: Consent
  description: |
    The primary API layer for the Data Use Oversight System DUOS
    ## Data Use Oversight System
    A semi-automated management service for compliant secondary use of
    human genomics data There are restrictions on researching human genomics data.
    For example: “Data can only be used for breast cancer research with non-commercial
    purpose”. The Data Use Oversight system ensures that researchers using genomics
    data honor these restrictions.
  version: 1.0.1
  license:
    name: BSD
    url: http://opensource.org/licenses/BSD-3-Clause
  termsOfService: https://github.com/DataBiosphere/consent

servers:
  - url: /

security:
  - googleoauth:
      - email
      - profile

paths:
  /api/approvalExpirationTime:
    get:
      summary: Get the approval expiration time
      description: |
        Get the approval expiration time. If no existing time exists, a
        default time of 7 days is returned.
      tags:
        - Election
      responses:
        200:
          description: The approval expiration time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalExpirationTime'
    post:
      summary: Create approval expiration time
      description: Create approval expiration time
      tags:
        - Election
      requestBody:
        description: Approval Expiration Time
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalExpirationTime'
      responses:
        201:
          description: Successfully created
        400:
          description: Bad Request
  /api/approvalExpirationTime/{id}:
    get:
      summary: Get the approval expiration time
      description: Get the approval expiration time
      tags:
        - Election
      parameters:
        - name: id
          in: path
          description: Approval Expiration Time id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The approval expiration time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalExpirationTime'
        400:
          description: ApprovalExpirationTime not found
    put:
      summary: Update approval expiration time
      description: Update approval expiration time
      tags:
        - Election
      parameters:
        - name: id
          in: path
          description: Approval Expiration Time id
          required: true
          schema:
            type: integer
      requestBody:
        description: Approval Expiration Time
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalExpirationTime'
      responses:
        200:
          description: Successfully updated
        400:
          description: Bad Request
    delete:
      summary: Delete approval expiration time
      description: Delete approval expiration time
      tags:
        - Election
      parameters:
        - name: id
          in: path
          description: Approval Expiration Time id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted
  /api/collections:
    $ref: './paths/collections.yaml'
  /api/collections/{collectionId}:
    $ref: './paths/collection.yaml'
  /api/collections/dar/{referenceId}:
    $ref: './paths/collectionByReferenceId.yaml'
  /api/collections/paginated:
    $ref: './paths/collectionsByToken.yaml'
  /api/collections/query:
    $ref: './paths/collectionsByQuery.yaml'
  /api/collections/role/{roleName}:
    $ref: './paths/collectionsByRoleName.yaml'
  /api/collections/{collectionId}/cancel:
    $ref: './paths/cancelCollectionByCollectionId.yaml'
  /api/collections/{collectionId}/resubmit:
    $ref: './paths/resubmitCollectionByCollectionId.yaml'
  /api/ontology:
    get:
      summary: List Ontology Files
      description: Returns description of the current ontology files that are indexed and stored.
      tags:
        - Ontology
      responses:
        200:
          description: Returns the collection of current ontology file information.
        400:
          description: There was a problem retrieving the files
    post:
      summary: Upload Ontology File
      description: Uploads and indexes an ontology file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      parameters:
        - name: metadata
          schema:
            type: string
          in: formData
          description: |
            JSON object specifying the ontology file metadata. Prefix is "DUOS" or "DOID" and type is "Organization" or "Disease"
            Examples:
              `{ "ontology_file": { "prefix": "DUOS", "type": "Organization" } }`
              `{ "ontology_file": { "prefix": "DOID", "type": "Disease" } }`
          required: true
        - name: ontology_file
          schema:
            type: file
          in: formData
          description: The uploaded ontology file
          required: true
      tags:
        - Ontology
      responses:
        200:
          description: Returns the result of the upload operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyFile'
        400:
          description: There was a problem indexing the file and the results were not uploaded or indexed
    put:
      summary: Delete Indexed File
      description: Delete an indexed ontology file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      tags:
        - Ontology
      responses:
        200:
          description: Successful file deletion
        400:
          description: There was a problem deleting the file.
      parameters:
        - name: fileURL
          in: formData
          description: Storage URL of the file to delete.
          required: true
          schema:
            type: string
  /api/ontology/file:
    get:
      summary: Get Ontology File
      description: Get the specified ontology file by storage url
      parameters:
        - name: fileUrl
          in: query
          description: File URL
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          description: File Name
          required: true
          schema:
            type: string
      tags:
        - Ontology
      responses:
        200:
          description: Specified file.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/ontology/types:
    get:
      summary: Get Ontology Types
      description: Get the allowed types for ontology file indexing purposes
      tags:
        - Ontology
      responses:
        200:
          description: List of allowed types.
  /api/consent/{consentId}/association:
    $ref: './paths/consentByIdAssociation.yaml'
  /api/consent/cases/summary:
    get:
      summary: Get Consent Summary Cases
      description: Returns number of denied, approved and pending cases.
      tags:
        - Consent Summary
      responses:
        200:
          description: Returns the summary of cases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/consent/cases/summary/file:
      get:
        summary: Get Consent Summary Detail File
        description: Returns a file with the detail of the reviewed cases whose type will be specified by fileType param.
        parameters:
         - name: fileType
           in: query
           description: DataAccess / TranslateDUL , defines the type of the reviewed cases info required.
           required: true
           schema:
             type: string
        tags:
          - Summary File
        responses:
          200:
            description: Export data to a txt file.
            content:
              text/plain:
                schema:
                  type: string
  /api/consent/cases/closed:
    get:
      summary: Describe Closed Elections
      description: Returns number of denied, approved and pending cases.
      tags:
        - Election
        - Consent
      responses:
        200:
          description: Returns the list of closed consent cases.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Election'
        404:
          description: unexpected error
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ErrorResponse'
  /api/consent/{consentId}/election:
    post:
      summary: Create Consent Election
      description: Creates a consent election
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: election
          in: body
          description: Election to be created
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
        - Consent
      responses:
        201:
          description: Returns the URI to access the newly created election.
        400:
          description: There is an existing open election for the consent.
        404:
          description: The consent sent as a parameter does not exist.
  /api/consent/{consentId}/election/dac/{dacId}:
    post:
      summary: Create Consent Election For Dac
      description: |
        Creates a consent election for a data access committee. Assigns the consent to the provided
        Data Access Committee.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: dacId
          in: path
          description: DAC ID
          required: true
          schema:
            type: integer
        - name: election
          in: body
          description: Election to be created
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
        - Consent
      responses:
        201:
          description: Returns the URI to access the newly created election.
        400:
          description: |
            There is an existing open election for the consent, or the consent is already
            associated to an existing dac.
        404:
          description: The consent or dac does not exist.
  /api/consent/{consentId}/election/{id}:
    put:
      summary: Update Consent Election
      description: Updates the election for the consent ID sent as parameter.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Election ID
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          description: Election to be created
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
        - Consent
      responses:
        200:
          description: Returns the updated election.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        404:
          description: "The Election/Consent doesn't exist."
    delete:
      summary: Delete Election
      description: Deletes the election identified by the IDs.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Election ID
          required: true
          schema:
            type: integer
      tags:
        - Election
        - Consent
      responses:
        200:
          description: The election was deleted.
        404:
          description: "The Election/Consent doesn't exist."
  /api/consent/manage:
    get:
      summary: Manage Consents
      description: Returns the list of consents available to be managed.
      tags:
        - Consent
      responses:
        200:
          description: The list of consents available to be managed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentManage'
  /api/consent/unreviewed:
    get:
      summary: Get total unreviewed DULs
      description: Retrieves the amount of unreviewed DUL elections.
      tags:
        - Consent
      responses:
        200:
          description: 'Returns an integer corresponding to the amount of unreviewed DULs'
  /api/consent:
    $ref: './paths/consent.yaml'
  /api/consent/{id}:
    get:
      summary: Get Consent by ID
      description: Returns the consent identified by the ID.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: Returns the requested consent.
          content:
            application/json:
              schema:
                $ref: './schemas/Consent.yaml'
        404:
          description: The consent associated with the ID couldn't be found.
    put:
      summary: Update Consent by ID
      description: Updates the consent identified by the ID.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: updated
          in: body
          description: Object that represents the consent to be updated
          required: true
          schema:
            $ref: './schemas/Consent.yaml'
      tags:
        - Consent
      responses:
        200:
          description: Returns the requested consent.
          content:
            application/json:
              schema:
                $ref: './schemas/Consent.yaml'
        400:
          description:
            Consent updates are only allowed when
              1-There have been no previous elections created for this consent
              2-The most recent election has been closed/cancelled AND archived
        404:
          description: The consent associated with the ID couldn't be found.
        500:
          description: Internal server error
  /api/consent/{id}/matches:
    get:
      summary: getMatches
      description: Returns the matches that are related to this consent.
      parameters:
        - name: id
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
      tags:
        - Match
        - Consent
      responses:
        200:
          description: Returns a list of matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
        404:
          description: The consent for the id couldn't be found.
  /api/consent/{consentId}/vote/{id}:
    post:
      summary: firstVoteUpdate
      description: Returns the created vote.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The vote ID.
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/Vote'
      tags:
        - Vote
      responses:
        200:
          description: Returns the created vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: 'Bad Request, malformed entity, etc'
        404:
          description: The association type wasn't send, or the application couldn't find any consents that matched the search criteria.
    put:
      summary: updateConsentVote
      description: Returns the updated vote.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The vote ID.
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/Vote'
      tags:
        - Vote
      responses:
        200:
          description: Returns the created vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: Bad Request, malformed entity, etc.
    get:
      summary: describe
      description: Returns the required vote.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The vote ID.
          required: true
          schema:
            type: integer
      tags:
        - Vote
      responses:
        200:
          description: Returns the required vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
    delete:
      summary: deleteVote
      description: Deletes the required vote.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The vote ID.
          required: true
          schema:
            type: integer
      tags:
        - Vote
      responses:
        200:
          description: Response = Vote was deleted
          content:
            application/json:
              schema:
                type: string
        404:
          description: The vote couldn't be found
  /api/consent/{consentId}/vote:
    delete:
      summary: deleteVotes
      description: Deletes the votes present for the consent sent as a parameter.
      parameters:
        - name: consentId
          in: path
          description: The consent ID.
          required: true
          schema:
            type: string
      tags:
        - Vote
        - Consent
      responses:
        200:
          description: Response = Votes for specified consent have been deleted
          content:
            application/json:
              schema:
                type: string
        404:
          description: The votes for the consent ID couldn't be found
  /api/dac:
    post:
      summary: Create a DAC
      operationId: createDac
      description: Create a Data Access Committee
      parameters:
        - name: dac
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/Dac'
      tags:
        - DAC
      responses:
        200:
          description: Successfully created a DAC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dac'
        400:
          description: Bad Request. DAC Name and Description are required.
        403:
          description: User not authorized to request all dacs.
        500:
          description: Internal Server Error
    put:
      summary: Update a DAC
      operationId: updateDac
      description: Update a Data Access Committee
      parameters:
        - name: dac
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/Dac'
      tags:
        - DAC
      responses:
        200:
          description: Successfully upated a DAC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dac'
        400:
          description: Bad Request. DAC ID, Name, and Description are required.
        500:
          description: Internal Server Error
    get:
      summary: Get all DACs
      description: All Data Access Committees with a list of chairpersons and members
      parameters:
        - name: withUsers
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - DAC
      responses:
        200:
          description: All Data Access Committees with chairpersons and members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dac'
        500:
          description: Internal Server Error
  /api/dac/{dacId}:
    get:
      summary: Get DAC by ID
      operationId: getDacById
      description: Get Data Access Committee by Id
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The Data Access Committee matching the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dac'
        404:
          description: No DAC found with the given ID
        500:
          description: Internal Server Error
    delete:
      summary: Delete DAC by ID
      operationId: deleteDac
      description: Delete Data Access Committee by Id
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The Data Access Committee matching the provided ID was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dac'
        404:
          description: No DAC found with the given ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/member/{userId}:
    post:
      summary: Add DAC Member
      operationId: addDacMember
      description: Adds a User as a Member to a Data Access Committee
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The added DAC Member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: No DAC or User found with the provided ID
        409:
          description: User is already a member of the DAC
        500:
          description: Internal Server Error
    delete:
      summary: Remove DAC Member
      operationId: removeDacMember
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: Dac member successfully removed
        404:
          description: No DAC or User found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/chair/{userId}:
    post:
      summary: Add DAC Chair
      operationId: addDacChair
      description: Adds a User as a Chairperson to a Data Access Committee
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The added DAC Chairperson
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: No DAC or User found with the provided ID
        409:
          description: User is already a member of the DAC
        500:
          description: Internal Server Error
    delete:
      summary: Remove DAC Chairperson
      operationId: removeDacChair
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The User ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: Dac chairperson successfully removed
        400:
          description: Dacs require at least one chair.
        404:
          description: No DAC or User found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/{dacId}/datasets:
    get:
      summary: Get All Datasets for DAC
      operationId: getDacDatasets
      description: List all Datasets of a DAC
      parameters:
        - name: dacId
          in: path
          description: The DAC ID
          required: true
          schema:
            type: integer
      tags:
        - DAC
      responses:
        200:
          description: The list of datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/Dataset.yaml'
        404:
          description: No DAC found with the provided ID
        500:
          description: Internal Server Error
  /api/dac/users/{term}:
    get:
      summary: Find Users by Search Term
      operationId: findUsersByTerm
      description: Find all users that match the search term. Matches on name and email address.
      parameters:
        - name: term
          in: path
          description: The Search Term
          required: true
          schema:
            type: string
      tags:
        - DAC
      responses:
        200:
          description: The list of users matching the term
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/User'
        500:
          description: Internal Server Error
  /api/dacuser:
    post:
      summary: Create User
      description: Creates a User
      parameters:
        - name: dac
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/User'
      tags:
        - User
      responses:
        200:
          description: Returns the created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Malformed user entity.
  /api/dacuser/{email}:
    get:
      summary: describe
      description: Returns the user identified by the email.
      parameters:
        - name: email
          in: path
          description: The email of the user.
          required: true
          schema:
            type: string
      tags:
        - User
      responses:
        200:
          description: Returns the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/dacuser/{id}:
    put:
      summary: update
      description: |
        Updates the user identified by the ID. Requires the authenticated user to have the same id
        as that of the user being updated except in the admin case - admins can update information
        for other users. A user's email cannot be updated. Role changes are not allowed for Chairperson
        and Member roles using this endpoint. All Chairperson and Member changes (additions or removals)
        are ignored. See [DAC](/#!/DAC) endpoints for **POST/DELETE** endpoints for
        **/api/dac/{dacId}/chair/{userId}** and **/api/dac/{dacId}/member/{userId}** calls.
        Users with the "Signing Official" are not permitted to change their institution. Such calls
        will result in a "Bad Request". "Signing Official" users are, however, allowed to save their
        institution if it is not already set.
      parameters:
        - name: id
          in: path
          description: The id of the updated user
          required: true
          schema:
            type: string
        - name: user
          in: body
          description: The updated user information
          required: true
          schema:
            type: object
            properties:
              updatedUser:
                $ref: '#/components/schemas/User'
      tags:
        - User
      responses:
        200:
          description: Returns the updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Malformed user entity or improper institution update
        403:
          description: User must have appropriate roles to update different users' information.
  /api/dacuser/status/{userId}:
    put:
      summary: updateUserStatusById
      description: |
        DEPRECATED: Use PUT /api/dacuser/{id}
        Update a user's status by user id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: json
          in: body
          schema:
            type: object
          description: |
            JSON object with a "status" member. Statuses allowed are "pending", "approved", or
            "rejected".
      tags:
        - User
      responses:
        200:
          description: Returns the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Server Error
  /api/dar/v2:
    post:
      summary: Create Data Access Request, version 2
      description: Creates a Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a DAR in json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the created Data Access Request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/DataAccessRequest.yaml'
        500:
          description: Internal Server Error.
    get:
      summary: Get all Data Access Requests
      description: Returns the list of all Data Access Requests
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns a list of Data Access Requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/DataAccessRequest.yaml'
        403:
          description: The user is not authorized to see all DARs
        500:
          description: Server Error
  /api/dar/v2/{referenceId}:
    get:
      summary: Get a Data Access Request by Reference Id
      description: Returns the created Data Access Request.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns a Data Access Request
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'
        400:
          description: The provided Reference Id is not a valid DAR identifier
        404:
          description: No DAR can be found with the provided identifier
        500:
          description: Server Error
    put:
      summary: Update a Data Access Request by Reference Id
      description: Returns the updated Data Access Request.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
        - name: dar
          in: body
          description: The fields that represent a DAR in json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns a Data Access Request
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'
        403:
          description: Updates are restricted to the create user.
        500:
          description: Internal Server Error.
    delete:
      summary: delete
      description: Deletes the DAR by reference id
      parameters:
        - name: referenceId
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Data Access Request was deleted
          content:
            application/json:
              schema:
                type: string
        403:
          description: Forbidden
        404:
          description: The requested DAR couldn't be found.
        406:
          description: There are existing resources that reference this Data Access Request
  /api/dar/v2/draft:
    post:
      summary: Create Draft Data Access Request
      description: Create Draft Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a Data Access Request, json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the created draft Data Access Request.
        500:
          description: Internal Server Error.
    get:
      summary: Get all Draft Data Access Requests
      description: Returns a list of all Draft Data Access Request
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns a list of Draft Data Access Requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/DataAccessRequest.yaml'
        500:
          description: Internal Server Error.
  /api/dar/v2/draft/{referenceId}:
    put:
      summary: Update Draft Data Access Request
      description: Update Draft Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
        - name: dar
          in: body
          description: The fields that represent a Data Access Request, json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the upated draft Data Access Request.
        403:
          description: Updates are restricted to the create user.
        500:
          description: Internal Server Error.
    get:
      summary: Get a Draft Data Access Request
      description: Returns the Draft Data Access Request specified by the referencId
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the draft Data Access Request.
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'
        500:
          description: Internal Server Error.
  /api/dar/v2/draft/manage:
    get:
      summary: Get all Draft Data Access Request Manage Objects
      description: Returns a list of information (Dar Manage Objects) on Draft DARs
      tags:
        - Data Access Request
      responses:
        201:
          description: Returns the draft Data Access Request Manage objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataAccessRequestManage'
        500:
          description: Internal Server Error.
  /api/dar/v2/{referenceId}/irbDocument:
    get:
      summary: Retrieve DAR IRB Document
      description: Retrieve the IRB Document for a Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Store DAR IRB Document
      description: |
        Store an IRB Document for a Data Access Request.
        Previous document is deleted.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      tags:
        - Data Access Request
      responses:
        200:
          description: Stores the document and returns the updated Data Access Request
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'
  /api/dar/v2/{referenceId}/collaborationDocument:
    get:
      summary: Retrieve DAR Collaboration Document
      description: Retrieve the Collaboration Document for a Data Access Request
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Store DAR Collaboration Document
      description: |
        Store a Collaboration Document for a Data Access Request.
        Previous document is deleted.
      parameters:
        - name: referenceId
          in: path
          description: The referenceId of the Data Access Request
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      tags:
        - Data Access Request
      responses:
        200:
          description: Stores the document and returns the updated Data Access Request
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'

  /api/dar:
    post:
      summary: createdDataAccessRequest
      description: |
        DEPRECATED: Use POST /api/dar/v2
        Creates a Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a DAR, json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the created Data Access Request, json file.
        500:
          description: Internal Server Error.
  /api/dar/cancel/{id}:
    put:
      summary: Cancel a Data Access Request
      description: Cancel a Data Access Request
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Successful cancelation of the Data Access Request
          content:
            application/json:
              schema:
                $ref: './schemas/DataAccessRequest.yaml'
        403:
          description: Forbidden
        404:
          description: Unable to find the Data Access Request with the provided id
        500:
          description: Internal error
  /api/dar/modalSummary/{id}:
    get:
      summary: getDataAcessRequestModalSummary
      description: Retrieves a DARModalDetails.
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: 'Returns a DARModalDetails initialized with the DAR associated with the provided Id.'
  /api/dar/find/{id}/consent:
    get:
      summary: describeConsentForDAR
      description: Returns the consent related to this DAR.
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
        - Consent
      responses:
        200:
          description: Returns the Consent.
          content:
            application/json:
              schema:
                $ref: './schemas/Consent.yaml'
        404:
          description: The requested couldn't be found or the DAR doesn't exist.
  /api/dar/manage/v2:
    get:
      summary: Manage Data Access Requests V2
      description: |
        Returns all the elections created for Data Access Requests relevant to the current user.
      parameters:
        - name: roleName
          in: query
          description: An optional roleName that the user is making the request as. A user can have multiple roles, so adding this parameter will filter the list accordingly.
          required: false
          schema:
            type: String
            nullable: true
            enum:
              - SigningOfficial
              - Researcher
      tags:
        - Data Access Request
      responses:
        200:
          description: A list of DAR elections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataAccessRequestManage'
        500:
          description: Server error.
  /api/dar/cases/unreviewed:
      get:
        summary: getTotalUnReviewedDAR
        description: Retrieves the amount of unreviewed DAR.
        tags:
          - Data Access Request
        responses:
         200:
           description: 'Returns an integer corresponding to the amount of unreviewed DARs'
  /api/dar/partial:
    post:
      summary: Create Partial Data Access Request
      description: |
        DEPRECATED: Use POST /api/dar/v2/draft
        Create Partial Data Access Request
      parameters:
        - name: dar
          in: body
          description: The fields that represent a DAR, json format.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the created partial Data Access Requests
        500:
          description: Internal Server Error.
    put:
      summary: Update Partial Data Access Request
      description: |
        DEPRECATED: Use PUT /api/dar/v2/draft/{referenceId}:
        Update Partial Data Access Request
      parameters:
        - name: dar
          in: body
          description: |
            The fields that represent a DAR, json format.
            Must contain a `referenceId` for the updated DAR.
            User must be the creator of the DAR.
          required: true
          schema:
            $ref: './schemas/DataAccessRequest.yaml'
      tags:
        - Data Access Request
      responses:
        200:
          description: Returns the updated partial Data Access Request, json file.
        403:
          description: Forbidden
        404:
          description: DAR or User Not Found
        500:
          description: Internal Server Error.
  /api/dar/partial/{id}:
    delete:
      summary: Delete Partial Data Access Request
      description: Delete Partial Data Access Request
      parameters:
        - name: id
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
      responses:
        200:
          description: Data Access Request was deleted
        403:
          description: Forbidden
        500:
          description: Internal Server Error.
  /api/dataRequest/cases/pending:
    get:
      summary: Get Data Access Request Pending Cases
      description: Retrieves the pending cases for open/final elections the user has access to
      tags:
        - Data Access Request
        - Pending Case
      responses:
        200:
          description: A list of Data Access Request Pending Cases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PendingCase'
  /api/dataRequest/cases/summary/DataAccess:
    get:
      summary: getConsentSummaryCases
      description: Retrieves the Summary of DAR cases
      tags:
        - Summary
        - Data Access Request
      responses:
        200:
          description: A summary of cases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/dataRequest/cases/summary/RP:
    get:
      summary: getConsentSummaryCases
      description: Retrieves the Summary of Research Purposes cases
      tags:
        - Summary
        - Research Purpose
      responses:
        200:
          description: A summary of cases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
  /api/dataRequest/cases/closed:
    get:
      summary: describeClosedElections
      description: Retrieves the closed DAR elections
      tags:
        - Data Access Request
        - Election
      responses:
        200:
          description: A list of closed DAR elections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Election'
        404:
          description: Election was not found.
  /api/dataRequest/{requestId}/election:
    get:
      summary: describe
      description: Returns the election for the sent DAR, if it exists.
      parameters:
        - name: requestId
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
        - Election
      responses:
        200:
          description: Returns the requested election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        404:
          description: The election or the DAR couldn't be found.
    post:
      summary: createDataRequestElection
      description: Creates an Access and RP Election for the DAR identified by the ID.
      parameters:
        - name: requestId
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
        - name: rec
          in: body
          description: The election to be created
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Data Access Request
        - Election
      responses:
        200:
          description: The created election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        400:
          description: Bad Request.
        404:
          description: The DAR couldn't be found.
  /api/dataRequest/{requestId}/election/{id}:
    delete:
      summary: deleteElection
      description: Deletes the election identified by the id.
      parameters:
        - name: requestId
          in: path
          description: The id of the DAR
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The id of the election
          required: true
          schema:
            type: string
      tags:
        - Data Access Request
        - Election
      responses:
        200:
          description: Response = Election was deleted
          content:
            application/json:
              schema:
                type: string
        404:
          description: The DAR or the election couldn't be found.
  /api/dataRequest/approved:
    get:
      summary: Get a list of approved DARs
      description: Get a list of approved DARs
      tags:
        - Data Access Request
      responses:
        200:
          description: A list of approved DARs
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/dataRequest/reviewed:
    get:
      summary: Get a list of reviewed DARs
      description: Get a list of reviewed DARs
      tags:
        - Data Access Request
      responses:
        200:
          description: A list of reviewed DARs
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/consent/{id}/dul:
    get:
      summary: getDUL
      description: Returns Data Use Letter file specified by consentId.
      parameters:
        - name: id
          in: path
          description: Id of the consent at which belongs the Data Use Letter.
          required: true
          schema:
            type: string
        - name: electionId
          in: query
          required: false
          description: Optional election id for the consent election
          schema:
            type: integer
      tags:
        - Consent
      responses:
        200:
          description: Data Use Letter file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
              description: attachment; filename= targetFile name
        404:
          description: Could not find consent with the specified Id
    post:
      summary: createDUL
      description: Persists the loaded file in the CloudStorage and update the related Consent.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      parameters:
        - name: data
          in: formData
          description: Data Use Letter file.
          required: true
          schema:
            type: file
        - name: id
          in: path
          description: Id of the consent at which belongs the Data Use Letter.
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          description: File name.
          required: false
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: The modified Consent with dataUseLetter field empty
          content:
            application/json:
              schema:
                $ref: './schemas/Consent.yaml'
        404:
          description: Could not find consent with the specified Id
    put:
      summary: updateDUL
      description: Updates the Consent's Data Use Letter in the CloudStorage and the related Consent.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      parameters:
        - name: data
          in: formData
          description: new Data Use Letter file.
          required: true
          schema:
            type: file
        - name: id
          in: path
          description: Id of the consent at which belongs the Data Use Letter.
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          description: File name.
          required: false
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: The updated Consent
          content:
            application/json:
              schema:
                $ref: './schemas/Consent.yaml'
        404:
          description: Could not find consent with the specified Id
    delete:
      summary: deleteDUL
      description: Deletes the Data Use Letter of the Consent specified by Id and updates the Consent's dataUseLetter property.
      parameters:
        - name: id
          in: path
          description: Id of the consent at which belongs the Data Use Letter.
          required: true
          schema:
            type: string
      tags:
        - Consent
      responses:
        200:
          description: The updated Consent with empty dataUseLetter property.
          content:
            application/json:
              schema:
                $ref: './schemas/Consent.yaml'
        404:
          description: Could not find consent with the specified Id
  /api/dataRequest/{requestId}/vote:
    get:
      summary: Find all Data Access Request votes
      description: Returns the votes of the election with the specified referenceId.
      parameters:
        - name: requestId
          in: path
          description: Reference Id of Data Access Request the Elections are on
          required: true
          schema:
            type: string
      tags:
        - Vote
        - Data Access Request
      responses:
        200:
          description: Returns the list of votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
    delete:
      summary: Delete votes for the Data Access Request election
      description: Deletes the votes of the election with the specified reference Id
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election of the Votes
          required: true
          schema:
            type: string
      tags:
        - Vote
        - Data Access Request
      responses:
        200:
          description: The Votes were deleted.
        404:
          description: The Election doesn't exist.
  /api/dataRequest/{requestId}/vote/{id}:
    get:
      summary: Find the vote for the Data Access Request and Vote ID
      description: Returns the Vote with the specified Id.
      parameters:
        - name: requestId
          in: path
          description: Reference Id of the Election of the requested Vote (this value is not used in the search, its only to complete the path)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - Data Access Request
      responses:
        200:
          description: Returns the requested Vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        404:
          description: The Vote doesn't exist.
    post:
      summary: Create a Data Access Request Vote
      description: update a Vote specified by VoteId of a DataRequest Election.
      requestBody:
        description: Vote to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election of the requested Vote (this value is not used in the create process, its only to complete the path)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - Data Access Request
      responses:
        201:
          description: Returns the updated Vote.
        400:
          description: Required parameter is null
        404:
          description: The vote id doesn't exist.
    put:
      summary: Update Data Access Request Vote
      description: update an edited Vote specified by VoteId of a DataRequest Election.
      requestBody:
        description: Vote to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election of the requested Vote ( this value is not used in the create process , its only to complete the path)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - Data Access Request
      responses:
        201:
          description: Returns the updated Vote.
        400:
          description: Required parameter is null
        404:
          description: The vote doesn't exist.
    delete:
      summary: Delete Vote by id
      description: Deletes the vote specified by the requestId and the VoteId.
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election at which the vote belongs.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - Data Access Request
      responses:
        200:
          description: The Vote was deleted.
        404:
          description: Could not find vote with this Vote ID.
  /api/dataRequest/{requestId}/vote/{id}/final:
    post:
      summary: Update Final Access Consent Vote
      description: update a the FinalAccessVote specified by VoteId of a DataRequest Election and set finalAccessVote Election property to TRUE.
      requestBody:
        description: Vote to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
      parameters:
        - name: requestId
          in: path
          description: referenceId of the Election of the requested Vote ( this value is not used in the process , its only to complete the path)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Vote ID
          required: true
          schema:
            type: integer
      tags:
        - Vote
        - Data Access Request
      responses:
        200:
          description: Returns the updated Vote.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        400:
          description: Required parameter is null
        404:
          description: Election for specified id does not exist OR
           Data Access Request for specified id does not exist OR
           No Library cards exist for the researcher on this DAR
  /api/dataset:
    get:
      summary: Get Datasets
      description: Returns Dataset list filtered by authenticated user.
      tags:
        - Datasets
      responses:
        200:
          description: A list of Datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/Dataset.yaml'

  /api/dataset/v2:
    post:
      summary: Creates the Dataset from JSON
      description: Creates the Dataset from JSON
      requestBody:
        description: Submitted dataset registration form. Dataset must contain the property Dataset Name with a unique value and a valid DataUse object.
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Dataset.yaml'
      tags:
        - Datasets
      responses:
        201:
          description: Successfully created Dataset
          content:
            application/json:
              schema:
                $ref: './schemas/Dataset.yaml'
        400:
          description: External Error (invalid input)
        409:
          description: Dataset Name given is already in use by another dataset
        500:
          description: Internal Error (something went wrong processing a valid input)
  /api/dataset/validate:
    get:
      summary: validateDatasetName
      description: Returns the dataset id if one exists for the given name (ignores case).
      parameters:
        - name: name
          in: query
          description: The name of the dataset to search for.
          required: true
          schema:
            type: string
      tags:
        - Datasets
      responses:
        200:
          description: dataset id
          content:
            application/json:
              schema:
                type: integer
        404:
          description: Dataset not found
  /api/dataset/sample:
    get:
      summary: getDataSetSample
      description: Returns a Dataset sample .tsv file.
      tags:
        - Datasets
      responses:
        200:
          description: .tsv sample
          content:
            text/plain:
              schema:
                type: string
          headers:
            Content-type:
              schema:
                type: string
              description: text/plain
            Content-Disposition:
              schema:
                type: string
              description: attachment; filename=DataSetSample.tsv
        500:
          description: Server error.
  /api/dataset/dictionary:
    get:
      summary: describeDictionary
      description: Return all the values that compound the dictionary , this values are the attributes of a Dataset.
      tags:
        - Datasets
      responses:
        200:
          description: An array of the existent dictionaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dictionary'
        500:
          description: Server error.
  /api/dataset/{id}:
    $ref: './paths/datasetById.yaml'
  /api/dataset/{id}/approved/users:
    get:
      summary: Dataset Approved Users
      description: Dataset Approved Users
      parameters:
        - name: id
          in: path
          description: The dataset id
          required: true
          schema:
            type: integer
      tags:
        - Datasets
      responses:
        200:
          description: Dataset Approved Users
          content:
            text/plain:
              schema:
                type: string
          headers:
            Content-type:
              schema:
                type: string
              description: text/plain
            Content-Disposition:
              schema:
                type: string
              description: attachment; filename=DatasetApprovedUsers.tsv
        500:
          description: Server error.
  /api/dataset/download:
    post:
      summary: downloadDataSets
      description: Returns the dataset Properties of the datasets whose Ids are in the idList
      parameters:
        - name: idList
          in: body
          description: List of DatasetIds.
          required: true
          schema:
            type: array
            items:
              type: string
      tags:
        - Datasets
      responses:
        200:
          description: The Dataset was deleted.
        500:
          description: Server error.
  /api/dataset/autocomplete/{partial}:
    get:
      summary: datasetAutocomplete
      description: Returns Dataset list with the Datasets whose objectsIds matches with the partial string.
      parameters:
        - name: partial
          in: path
          description: the value to autocomplete.
          required: true
          schema:
            type: string
      tags:
        - Datasets
      responses:
        200:
          description: An array of Dataset objectIds
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Server error.
  /api/dataset/disable/{id}/{active}:
    $ref: './paths/datasetDisableById.yaml'
  /api/datasetAssociation/{datasetId}:
    get:
      summary: Get Dataset Associations
      description: Get all dataset associations
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
      tags:
        - Datasets
      responses:
        200:
          description: Map of associated and non-associated users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetAssociationMap'
    post:
      summary: Create Dataset Associations
      operationId: Create dataset associations for the provided dataset and users
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
        - name: userIdList
          in: body
          description: list of user ids
          required: true
          schema:
            type: array
            items:
              type: integer
      tags:
        - Datasets
      responses:
        201:
          description: An array of created dataset associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetAssociation'
    put:
      summary: Update Dataset Associations
      operationId: Update dataset associations for the provided dataset and users
      parameters:
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
        - name: userIdList
          in: body
          description: list of user ids
          required: true
          schema:
            type: array
            items:
              type: integer
      tags:
        - Datasets
      responses:
        200:
          description: An array of updated dataset associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetAssociation'
  /api/election/{id}:
    get:
      summary: describeElectionById
      description: Returns the Election identified by Id.
      parameters:
        - name: id
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
      tags:
        - Election
      responses:
        200:
          description: Election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        400:
          description: Could not find Election with the specified Id
  /api/election/{electionId}/votes:
    get:
      summary: get the votes on the election specified by the electionId
      description: Returns the list of votes associated with the election identified by Id
      parameters:
        - name: electionId
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
      tags:
        - Election
      responses:
        200:
          description: List of votes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        404:
          description: Could not find Election with the specified Id
        500:
          description: Internal Server Error
    put:
      summary: updateElection
      description: "Updates the election specified by Id."
      parameters:
        - name: id
          in: path
          description: Id of the Election to Update
          required: true
          schema:
            type: integer
        - name: rec
          in: body
          description: Updated Election.
          required: true
          schema:
            $ref: '#/components/schemas/Election'
      tags:
        - Election
      responses:
        200:
          description: updated Election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        400:
          description: Illegal Argument Exception
  /api/election/{referenceId}/advance/{vote}:
    post:
      summary: Advance Elections
      description: Advance all incomplete votes in any elections on the reference.
      operationId: advanceElections
      parameters:
        - name: referenceId
          in: path
          description: referenceId for the Elections
          required: true
          schema:
            type: string
        - name: vote
          in: path
          description: Vote value for all votes in the Elections
          required: true
          schema:
            type: string
            enum:
              - Yes
              - No
      tags:
        - Election
      responses:
        200:
          description: All incomplete votes for the elections have been advanced.
        500:
          description: Server error.
  /api/electionReview:
    get:
      summary: getCollectElectionReview
      description: Returns the ElectionReview from an Open Election identified by reference Id.
      parameters:
        - name: referenceId
          in: query
          description: referenceId of the Election
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: Type of the Election
          required: true
          schema:
            type: string
            enum:
              - TranslateDUL
              - DataAccess
              - DataSet
              - RP
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/electionReview/openElection:
    get:
      summary: describeElectionById
      description: Endpoint to verify the existence of Open elections.
      tags:
        - Election
      responses:
        200:
          description: Returns TRUE if there is at least one Open election otherwise return FALSE.
          content:
            text/plain:
              schema:
                type: string
  /api/electionReview/{electionId}:
    get:
      summary: describeElectionReviewByElectionId
      description: "Returns the ElectionReview from an Election identified by ElectionId. This endpoint doesn't filter votes by isFinalAccess attribute so the reviewVote array of the retrieved ElectionReview will contain the isFinalAccess = TRUE Vote."
      parameters:
        - name: electionId
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/electionReview/access/{electionId}:
    get:
      summary: get ElectionReview for access election identified by electionId
      description: Returns the ElectionReview from an Election identified by ElectionId. This endpoint can be used only for DataAccess elections.
      parameters:
        - name: electionId
          in: path
          description: Election Id
          required: true
          schema:
            type: integer
        - name: isFinalAccess
          in: query
          description: Defines if the reviewVote array of the retrieved ElectionReview will contain or not the isFinalAccess = TRUE Vote.
          required: true
          schema:
            type: boolean
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/electionReview/rp/{electionId}:
    get:
      summary: get ElectionReview for rp election identified by electionId
      description: Returns the ElectionReview from an Election identified by ElectionId. This endpoint can be used only for Research Purpose elections.
      parameters:
        - name: electionId
          in: path
          description: |
            Election Id for the associated Data Access Election
            (and not the associated RP Election, this is legacy behavior).
          required: true
          schema:
            type: integer
        - name: isFinalAccess
          in: query
          description: Defines if the reviewVote array of the retrieved ElectionReview will contain or not the isFinalAccess = TRUE Vote.
          required: true
          schema:
            type: boolean
      tags:
        - ElectionReview
      responses:
        200:
          description: ElectionReview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionReview'
  /api/emailNotifier/reminderMessage/{voteId}:
    post:
      summary: Send Reminder Email
      description: Send a reminder email to the owner of a vote
      parameters:
        - name: voteId
          in: path
          description: String value of the vote id for a user's vote in an election
          required: true
          schema:
            type: string
      tags:
        - Notifier
      responses:
        200:
          description: Email successfully sent
        500:
          description: Server error.

  /api/institutions:
    get:
      summary: Institution INDEX resource
      description: Fetches all institutions
      tags:
        - Institutions
      responses:
        200:
          description: Returns all institutions, along with their create user, update user, and signing official users if there are any.
            If no results are found, an empty array is returned.
            Admin will see all details while non-Admins will only see a subset.
        500:
          description: Internal Server Error
    post:
      summary: Institution CREATE resource
      description: Creates new institution record based on json payload
      tags:
        - Institutions
      requestBody:
        description: Required JSON payload representing updated Institution
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
      responses:
        201:
          description: Creates and returns newly created record.
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /api/institutions/{id}:
    get:
      summary: Institution GET
      description: Fetches Institution based on id param
      tags:
        - Institutions
      parameters:
        - name: id
          in: path
          description: Institution ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns target institution.
            Admin will see all details while non-Admins will only see a subset.
        404:
          description: Institution not found
        500:
          description: Internal Server Error
    put:
      summary: Institution UPDATE
      description: Updates institution based on id and json payload
      tags:
        - Institutions
      parameters:
        - name: id
          in: path
          description: Institution ID
          required: true
          schema:
            type: string
      requestBody:
        description: Required JSON payload representing updated Institution
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
      responses:
        200:
          description: Updates and returns target institution
        400:
          description: Bad Request
        404:
          description: Institution not found
        500:
          description: Internal Server Error
    delete:
      summary: Institution DELETE
      description: Deletes institution based on id
      tags:
        - Institutions
      parameters:
        - name: id
          in: path
          description: Institution ID
          required: True
          schema:
            type: string
      responses:
        204:
          description: Deletes target institution (no return entity)
        404:
          description: Institution not found
        500:
          description: Internal Server Error
  /api/libraryCards:
    get:
      summary: Library Card INDEX resource
      description: Returns all saved library cards
      tags:
        - Library Card
        - Admin
      responses:
        200:
          description: Library Card INDEX request success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        401:
          description: User not authorized
        500:
          description: Internal server error
    post:
      summary: Library Card CREATE resource
      description: Creates a new Library Card based on user-provided json
      requestBody:
        description: JSON representation of libraryCard payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryCard'
      tags:
        - Library Card
        - Admin
      responses:
        201:
          description: Library Card CREATE success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        400:
          description: Bad request (Issues with json payload)
        401:
          description: User not authorized
        409:
          description: Library Card payload conflicts with an existing record
        500:
          description: Internal server error
  /api/libraryCards/{id}:
    get:
      summary: Library Card GET Resource
      description: Fetch library card bases on id parameter
      tags:
        - Library Card
        - Admin
      parameters:
      - name: id
        in: path
        description: Library Card ID
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Library Card GET success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        401:
          description: User not authorized
        404:
          description: Library Card not found
        500:
          description: Internal server error
    put:
      summary: Library Card PUT resource
      description: Update target Library Card based on id parameter and user provided json
      tags:
        - Library Card
        - Admin
      parameters:
      - name: id
        in: path
        description: Library Card ID
        required: true
        schema:
          type: integer
      requestBody:
          description: 'JSON representation of updated Library Card state'
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
      responses:
        200:
          description: Library Card PUT request success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        400:
          description: Bad request (Issues with json payload)
        401:
          description: User not authorized
        404:
          description: Library Card not found
        409:
          description: Library Card payload conflicts with an existing record
        500:
          description: Internal server error
    delete:
      summary: Library Card DELETE resource
      description: Delete target Library Card based on id parameter
      tags:
        - Library Card
        - Admin
      parameters:
      - name: id
        in: path
        description: Library Card ID
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Library Card DELETE request success
        401:
          description: User not authorized
        404:
          description: Library Card not found
        500:
          description: Internal server error
  /api/libraryCards/institution/{id}:
    get:
      summary: Library Card GET based on Institution ID
      description: Returns all Library Cards with institution_id equal to provided id
      tags:
        - Library Card
        - Institutions
      parameters:
      - name: id
        in: path
        description: Institution ID
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Library Card GET request success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        401:
          description: User not authorized
        404:
          description: Institution not found
        500:
          description: Internal server error
  /api/match/{consentId}/{purposeId}:
    get:
      summary: getMatches
      description: Returns the match results between a Consent and a Data Access Request.
      parameters:
        - name: consentId
          in: path
          description: Consent ID
          required: true
          schema:
            type: string
        - name: purposeId
          in: path
          description: Data Access Request (or research purpose) ID
          required: true
          schema:
            type: string
      tags:
        - Consent
        - Data Access Request
        - Match
      responses:
        200:
          description: Returns a match result of the stuctured use restrictions of the Consent
            and Data Access Request. If no results are found, no data is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResult'
        404:
          description: No match exists for the provided Consent and Data Access Request
        500:
          description: Server error.

  /api/match/reprocess/purpose/{purposeId}:
    post:
      summary: Process all matches for this research purpose (DAR) id
      description: Process all matches for this research purpose (DAR) id
      tags:
        - Data Access Request
        - Match
      parameters:
        - name: purposeId
          in: path
          description: Data Access Request (or research purpose) ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns a list of reprocessed match results of the Data Access Request. If no results are found, no data is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResult'
        500:
          description: Server error.

  /api/match/consent/{consentId}:
    get:
      summary: Get all matches for this consent id
      description: Get all matches for this consent id
      tags:
        - Consent
        - Match
      parameters:
        - name: consentId
          in: path
          description: Consent Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns a list of match results of the Consent. If no results are found, no data is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResult'
        500:
          description: Server error.

  /api/match/purpose/{purposeId}:
    get:
      summary: Get all matches for this research purpose (DAR) id
      description: Get all matches for this research purpose (DAR) id
      tags:
        - Data Access Request
        - Match
      parameters:
        - name: purposeId
          in: path
          description: Data Access Request (or research purpose) ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns a list of match results of the Data Access Request. If no results are found, no data is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResult'
        500:
          description: Server error.

  /api/user:
    post:
      summary: Create User
      description: Create a user with RESEARCHER role using the user's current authentication status.
      tags:
        - User
      responses:
        200:
          description: Returns the created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Unable to validate the user's google identity.
        409:
          description: User should be unique
        500:
          description: Server error.
  /api/user/me:
    get:
      summary: Find currently authenticated user
      description: Find currently authenticated user
      tags:
        - User
      responses:
        200:
          description: The user, along with researcher properties and library cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Server error.
  /api/user/institution/unassigned:
    get:
      summary: Find users that do not belong to an institution
      description: Find users that do not belong to an institution
      tags:
        - User
      responses:
        200:
          description: An array of users that do not belong to an institution
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Internal Server Error
  /api/user/signing-officials:
    get:
      summary: Find SOs for currently authenticated user's institution
      description: Return list of SOs belonging to the same institution as currently authenticated user
      tags:
        - User
      responses:
        200:
          description: The users with the same institutionId and SO Role
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimplifiedUser'
        404:
          description: User not found
        500:
          description: Server error.
  /api/user/{userId}:
    get:
      summary: Find user by id
      description: Finds user by the user id. Available to Admin, Chair, and Member roles
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: number
      tags:
        - User
      responses:
        200:
          description: The user, along with researcher properties and library cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Server error.
  /api/user/profile:
    post:
      summary: Create user properties.
      description: Create properties for the current user.
      requestBody:
        description: Map<String, String> for user properties.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProperties'
      tags:
        - User
      responses:
        201:
          description: The user properties were created.
        400:
          description: Malformed entity.
        409:
          description: Unsupported operation.
        500:
          description: Server error.
    put:
      summary: Update user properties
      description: Updates a user.
      requestBody:
        description: Map<String, String> for user properties.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProperties'
      parameters:
        - name: validate
          in: query
          description: Defines if the endpoint should validate if all the required fields are present. If not, it will fail.
          required: true
          schema:
            type: boolean
      tags:
        - User
      responses:
        200:
          description: The user was updated, and returns the properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Malformed researcher entity.
        404:
          description: The requested user doesn't exist in the system.
        500:
          description: Server error.
  /api/user/role/{roleName}:
    get:
      summary: Get a list of users that you have access to based on your role
      description: Finds users based on the user role and permissions
      parameters:
        - name: roleName
          in: path
          description: The name of the role of the user
          schema:
            type: string
            required: true
            enum: [Admin, SigningOfficial]
      tags:
        - User
      responses:
        200:
          description: The list of users, along with their roles, does not include properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Unsupported or Invalid role name
        404:
          description: The user does not have the given role, or role is SO and the user does not have an Institution
        500:
          description: Server error.
  /api/user/{userId}/{roleId}:
    put:
      summary: Add a role to a user
      description: Add a role to a user id. Available to Admin roles
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: number
        - name: roleId
          in: path
          description: |
            The id of the role. Members and Chairpersons cannot be added this way.
            See DAC endpoints for those roles.
            ALUMNI: 3
            ADMIN: 4
            RESEARCHER: 5
            DATAOWNER: 6
            SIGNINGOFFICIAL: 7
          required: true
          schema:
            type: number
      tags:
        - User
      responses:
        200:
          description: Updated user along with researcher properties and library cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        304:
          description: Not modified
        400:
          description: Bad Request
        404:
          description: User not found
        500:
          description: Server error.
    delete:
      summary: Delete a role from a user
      description: Delete a role from a user, specified by given userId. Available to Admin roles
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: number
        - name: roleId
          in: path
          description: |
            The id of the role. Members and Chairpersons cannot be deleted this way.
            See DAC endpoints for those roles.
            ALUMNI: 3
            ADMIN: 4
            RESEARCHER: 5
            DATAOWNER: 6
            SIGNINGOFFICIAL: 7
          required: true
          schema:
            type: number
            nullable: false
            enum:
              - 3
              - 4
              - 5
              - 6
              - 7
      tags:
        - User
      responses:
        200:
          description: Updated user along with researcher properties and library cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
        404:
          description: User not found
        500:
          description: Server error.
  /api/user/{email}:
    delete:
      summary: Delete User by email
      description: Deletes the user identified by the email.
      parameters:
        - name: email
          in: path
          description: The email of the user.
          required: true
          schema:
            type: string
      tags:
        - User
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
  /api/researcher:
    post:
      deprecated: true
      summary: Create researcher properties.
      description: |
        Deprecated - use POST /api/user/{userId}
        Create researcher properties for the current user.
      parameters:
        - name: researcherProperties
          in: body
          required: true
          description: Map<String, String> for user properties.
          schema:
            $ref: '#/components/schemas/UserProperties'
      tags:
        - Researcher
      responses:
        201:
          description: The researcher properties were created.
        400:
          description: Malformed researcher entity.
        409:
          description: Unsupported operation.
        500:
          description: Server error.
    put:
      deprecated: true
      summary: Update researcher.
      description: |
        Deprecated - use PUT /api/user/{userId}
        Updates a researcher user.
      parameters:
        - name: validate
          in: query
          description: Defines if the endpoint should validate if all the required fields are present. If not, it will fail.
          required: true
          schema:
            type: boolean
        - name: researcherProperties
          in: body
          required: true
          description: Map<String, String> for user properties.
          schema:
            $ref: '#/components/schemas/UserProperties'
      tags:
        - Researcher
      responses:
        200:
          description: The researcher was updated, and returns the properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProperties'
        400:
          description: Malformed researcher entity.
        404:
          description: The requested user doesn't exist in the system.
        500:
          description: Server error.
  /api/researcher/{userId}:
    get:
      deprecated: true
      summary: Return researcher properties.
      description: |
        DEPRECATED: Use /api/user/me or /api/user/{id}
        Describes all the properties for a reseacher user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - User
        - Researcher
      responses:
        200:
          description: Returns the user properties. Map<String, Object> format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProperties'
        404:
          description: The requested user doesn't exist in the system.
    delete:
      summary: Delete Researcher properties
      description: Deletes all the properties for the related user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - User
        - Researcher
      responses:
        200:
          description: The properties were deleted. No response object, just 200 response.
        404:
          description: The requested user doesn't exist in the system
  /api/nih:
    delete:
      summary: Delete Era Commons Account
      description: Removes only Era Commons Account related information from the logued user, requesting this action
      tags:
        - User
        - eRA Commons
        - Nih
      responses:
        200:
          description: Returns an empty response if the operation was successful
    post:
      summary: Store NIH information
      description: Save user's eRA Commons account
      parameters:
        - name: nihAccount
          in: body
          description: NIH Account information
          required: true
          schema:
            $ref: '#/components/schemas/NIHUserAccount'
      tags:
        - User
        - Researcher
        - eRA Commons
        - Nih
      responses:
        200:
          description: Returns eRA Commons Account information. Map<String, String> format
        404:
          description: The user doesn't exist in the system
  /api/sam/register/self:
    post:
      summary: Create current user in the Sam system using current login credentials
      description: Create current user in the Sam system using current login credentials
      tags:
        - Sam
      responses:
        200:
          description: Sam User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamUserInfo'
        409:
          description: Conflict, user exists
        500:
          description: Internal Server Error
  /api/sam/register/self/diagnostics:
    get:
      summary: Gets the various Sam enabled statuses of the logged in user
      description: Gets the various Sam enabled statuses of the logged in user
      tags:
        - Sam
      responses:
        200:
          description: Sam Self Diagnostics
          content:
            application/json:
              schema:
                $ref: '#/components/schema/SamSelfDiagnostics'
        404:
          description: User not found
        500:
          description: Internal Server Error
  /api/sam/register/self/info:
    get:
      summary: Gets the Sam registration status info of the logged in user
      description: Gets the Sam registration status info of the logged in user
      tags:
        - Sam
      responses:
        200:
          description: Sam User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamUserInfo'
        404:
          description: User not found
        500:
          description: Internal Server Error
  /api/sam/resource-types:
    get:
      summary: Sam Resource Types
      description: Sam Resource Types
      tags:
        - Sam
      responses:
        200:
          description: Sam Resource Types
          content:
            application/json:
              schema:
                type: object
        500:
          description: Internal Server Error
  /metrics/dac/decision:
    get:
      summary: Dac Decision Metrics
      description: Dac Decision Metrics
      tags:
        - Metrics
      responses:
        200:
          description: Dac Decision Metrics
          content:
            text/plain:
              schema:
                type: string
        500:
          description: Internal Server Error
  /metrics/dar/decision:
    get:
      summary: DAR Decision Metrics
      description: DAR Decision Metrics
      tags:
        - Metrics
      responses:
        200:
          description: DAR Decision Metrics
          content:
            text/plain:
              schema:
                type: string
        500:
          description: Internal Server Error
  /metrics/dataset/{datasetId}:
    get:
      summary: Dataset Metrics
      description: get dars and elections associated with datasetId
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Metrics
      responses:
        200:
          description: Dataset Metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schema/DatasetMetrics'
        404:
          description: Dataset with specified ID does not exist
        500:
          description: Internal Server Error
  /status:
    get:
      summary: System Health Status
      description: |
        A detailed description of the various subsystem statuses that Consent relies upon.
        Current systems include:
          * Elastic Search
          * GCS
          * Ontology
          * Postgres DB
      tags:
        - Status
      responses:
        200:
          description: All systems are OK
        500:
          description: Some number of subsystems are not OK.

  /version:
    get:
      summary: Current application version
      description: The current short hash and version of the application.
      tags:
        - Status
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        500:
          description: Internal Server Error

components:
  securitySchemes:
    googleoauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            email: email authorization
            profile: profile authorization
  schemas:
    Collaborator:
      $ref: './schemas/Collaborator.yaml'
    Consent:
      $ref: './schemas/Consent.yaml'
    ConsentAssociation:
      $ref: './schemas/ConsentAssociation.yaml'
    DarCollection:
      $ref: './schemas/DarCollection.yaml'
    DataAccessRequest:
      $ref: './schemas/DataAccessRequest.yaml'
    Dataset:
      $ref: './schemas/Dataset.yaml'
    DatasetProperty:
      $ref: './schemas/DatasetProperty.yaml'
    Election:
      $ref: './schemas/Election.yaml'
    Institution:
      $ref: './schemas/Institution.yaml'
    LibraryCard:
      $ref: './schemas/LibraryCard.yaml'
    PaginationResponse:
      $ref: './schemas/PaginationResponse.yaml'
    UserProperty:
      $ref: './schemas/UserProperty.yaml'
    UserProperties:
      $ref: './schemas/UserProperties.yaml'
    NIHUserAccount:
      type: object
      properties:
        nihUsername:
          type: string
          description: Nih account associated name.
        datasetPermissions:
          type: array
          items:
            type: string
          description: NIH dataset access permissions.
        status:
          type: string
          description: Flag to determine if a user is authorized.
        eraExpiration:
          type: string
          description: Contains the eRA account expiration date in miliseconds. This will be 30 days from the user's authentication.
    Vote:
      type: object
      properties:
        voteId:
          type: integer
          format: int32
          description: Describes the id of the vote.
        vote:
          type: boolean
          description: Describe the Positive or negative value of the vote
        dacUserId:
          type: integer
          format: int32
          description: Describes the id of the voter.
        createDate:
          type: string
          format: date
          description: Describes the date the vote was created.
        updateDate:
          type: string
          format: date
          description: Describes the date the vote was last modified.
        electionId:
          type: integer
          format: int32
          description: Describes the id of the election the election at which the vote belongs.
        rationale:
          type: string
          description: If the final vote is NO, the voter can specify why in this field.
        type:
          type: string
          description: Specifies the type of the vote (DAC, CHAIRPERSON, AGREEMENT, FINAL)
        isReminderSent:
          type: boolean
          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.
        hasConcerns:
          type: boolean
          description: For Dataset elections, it is a flag for DataSet owners concerns.
    MatchResult:
      type: object
      properties:
        id:
          type: integer
          description: The id of the stored match result
        consent:
          type: string
          description: The Consent ID
        purpose:
          type: string
          description: The Data Access Request ID
        match:
          type: boolean
          description: The match condition between the Consent and Data Access Request
        failed:
          type: boolean
          description: Indicates a system failure or not. If true, the system was not able to
            perform a logic match between the two objects due to a server error.
        createDate:
          type: string
          description: A string representation of the date that this match result was created.
    Match:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The ID of the entity.
        consent:
          type: string
          description: The matched consent.
        purpose:
          type: string
          description: The matched research purpose.
        match:
          type: boolean
          description: True if the entities match, false otherwise.
        failed:
          type: boolean
          description: True if the matching process failed, for any reason.
        createDate:
          type: string
          format: date
          description: Describes the date the match was created.
    PendingCase:
      type: object
      properties:
        referenceId:
          type: string
          description: The reference ID that identifies the case
        frontEndId:
          type: string
          description: The front end ID for the case
        logged:
          type: string
          description: Describes the logged votes vs. total votes required.
        alreadyVoted:
          type: boolean
          description: Describes if the user already voted on this case
        isReminderSent:
          type: boolean
          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.
        isFinalVote:
          type: boolean
          description: If the user is chairperson, this will be false if the final vote is not logged yet, true otherwise.
        status:
          type: string
          description: Status of the vote. Pending or editable.
        electionStatus:
          type: string
          description: Describes the status of the election related to this pending case. Open, closed or cancelled.
        electionId:
          type: integer
          format: int32
          description: Describes the id of the election related to this pending  case.
        voteId:
          type: integer
          format: int32
          description: Describes the id of the users vote, related to this particular pending case.
        createDate:
          type: string
          format: date
          description: 'Defines the type of the association. Possible values: sample, sampleSet.'
        totalVotes:
          type: integer
          format: int32
          description: Describes the total votes(users) required to vote for this election.
        votesLogged:
          type: integer
          format: int32
          description: Votes already logged in this pending case. Equal to the total of users that voted minus the ones that didnt.
        rpElectionId:
          type: integer
          format: int32
          description: Describes the id of the research purpose election related to this pending case, if it exists
        rpVoteId:
          type: integer
          format: int32
          description: Describes the id of the research purpose vote, related to this particular pending case, if it exists
    Summary:
      type: object
      properties:
        reviewedPositiveCases:
          type: integer
          format: int32
          description: Describes the number of cases that were denied.
        reviewedNegativeCases:
          type: integer
          format: int32
          description: Describes the number of cases that were approved.
        pendingCases:
          type: integer
          format: int32
          description: Describes the number of cases that are opened and have to be reviewed.
    ConsentManage:
      type: object
      properties:
        consentId:
          type: string
          description: The consent ID of the case.
        consentName:
          type: string
          description: The consent name of the case.
        editable:
          type: boolean
          description: If the consent manage is editable.
        electionStatus:
          type: string
          description: The status of the election related to the consent.
        electionId:
          type: integer
          description: The electionId of the election related to the consent.
        createDate:
          type: string
          format: date-time
          description: The datetime the election was created.
        sortDate:
          type: string
          format: date-time
          description: The datetime the election was created/updated (the last updated).
        updateStatus:
          type: boolean
          description: Indicates if a consent has been updated from orsp
    DataAccessRequestManage:
      type: object
      properties:
        dar:
          type: object
          description: The Data Access Request
        election:
          type: object
          description: The Election
        votes:
          type: array
          description: The Votes for the Election
        dac:
          type: object
          description: The DAC for the Election
        researcher:
          type: object
          description: The Researcher for the Data Access Request
        referenceId:
          type: string
          description: The reference ID that identifies the case
          deprecated: true
        logged:
          type: string
          description: Describes the logged votes vs. total votes required.
          deprecated: true
        alreadyVoted:
          type: boolean
          description: Describes if the user already voted on this case
          deprecated: true
        isReminderSent:
          type: boolean
          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.
          deprecated: true
        isFinalVote:
          type: boolean
          description: If the user is chairperson, this will be false if the final vote is not logged yet, true otherwise.
          deprecated: true
        status:
          type: string
          description: Status of the vote. Pending or editable.
          deprecated: true
        voteId:
          type: integer
          format: int32
          description: Describes the id of the users vote, related to this particular pending case.
          deprecated: true
        totalVotes:
          type: integer
          format: int32
          description: Describes the total votes(users) required to vote for this election.
          deprecated: true
        votesLogged:
          type: integer
          format: int32
          description: Votes already logged in this pending case. Equal to the total of users that voted minus the ones that didnt.
          deprecated: true
        rpElectionId:
          type: integer
          format: int32
          description: Describes the id of the research purpose election related to this pending case, if it exists
          deprecated: true
        rpVoteId:
          type: integer
          format: int32
          description: Describes the id of the research purpose vote, related to this particular pending case, if it exists
          deprecated: true
        electionStatus:
          type: string
          description: The status of the election.
          deprecated: true
        rus:
          type: string
          description: The rus of the Data Access Request.
          deprecated: true
        dataRequestId:
          type: string
          description: The ID of the Data Access Request.
          deprecated: true
        projectTitle:
          type: string
          description: The title of the project, in the Data Access Request
          deprecated: true
        frontEndId:
          type: string
          description: The front end ID for the case
          deprecated: true
        electionId:
          type: integer
          format: int32
          description: The ID of the election related to the DAR.
          deprecated: true
        createDate:
          type: string
          format: date-time
          description: The Date the election was created.
          deprecated: true
        sortDate:
          type: string
          format: date
          description: The datetime the election was created/updated (the last one).
          deprecated: true
        electionVote:
          type: boolean
          description: Result of the election
          deprecated: true
        isCanceled:
          type: boolean
          description: The DAR is canceled
          deprecated: true
        needsApproval:
          type: boolean
          description: The DAR requires Data Owners approval
          deprecated: true
        dataSetElectionResult:
          type: string
          description: Result of the Data Owners elections.
          deprecated: true
        datasetId:
          type: integer
          format: int32
          description: The ID of the dataset for this DAR.
          deprecated: true
        dacId:
          type: integer
          format: int32
          description: The ID of the DAC for this DAR's dataset.
          deprecated: true
        errors:
          type: array
          items:
            type: string
          description: List of any structural errors with this DAR
          deprecated: true
        ownerUser:
          description: The owner of the DAR
          deprecated: true
          type: object
          items:
            $ref: '#/components/schemas/User'
    DatasetAssociation:
      type: object
      properties:
        datasetId:
          type: integer
          description: The dataset id
        dacuserId:
          type: integer
          description: The user id
        createDate:
          type: string
          description: Association creation date
    DatasetAssociationMap:
      type: object
      properties:
        associated_users:
          description: Associated Users
          type: array
          items:
            $ref: '#/components/schemas/User'
        not_associated_users:
          description: Non-associated Users
          type: array
          items:
            $ref: '#/components/schemas/User'
    Dictionary:
      type: object
      properties:
        keyId:
          type: integer
          format: int32
          description: Id of the key.
        key:
          type: integer
          format: int32
          description: Value of the key.
        required:
          type: boolean
          description: Defines if this attribute is required to create a Dataset
        displayOrder:
          type: integer
          format: int32
          description: Defines the position of the attribute in the .tsv file
        createDate:
          type: string
          format: date
          description: Describes the date the Dictionary was created.
        receiveOrder:
          type: integer
          format: int32
          description: The display order of the properties.
    ElectionReview:
      type: object
      properties:
        reviewVote:
          type: array
          items:
            $ref: '#/components/schemas/ElectionReviewVote'
          description: Votes related to the Election.
        election:
          $ref: '#/components/schemas/Election'
        consent:
          $ref: './schemas/Consent.yaml'
        voteAgreement:
          $ref: '#/components/schemas/Vote'
        finalVote:
          $ref: '#/components/schemas/Vote'
        rpElectionId:
          type: integer
          description: The research purpose ID.
    ElectionReviewVote:
      type: object
      properties:
        Vote:
          $ref: '#/components/schemas/Vote'
        displayName:
          type: string
          description: Name of the voter.
        email:
          type: string
          description: Email of the voter.
    Dac:
      type: object
      properties:
        dacId:
          type: integer
          description: The DAC Id
        name:
          type: string
          description: The DAC Name
        description:
          type: string
          description: The DAC Description
        createDate:
          type: string
          format: date
          description: Date created
        updateDate:
          type: string
          format: date
          description: Date last updated
        chairpersons:
          description: List of Chairpersons
          type: array
          items:
            $ref: '#/components/schemas/User'
        members:
          description: List of Members
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        dacUserId:
          type: integer
          description: ID of the user
        email:
          type: string
          description: Email of the user
        emailPreference:
          type: boolean
          description: The user wants email notifications.
        displayName:
          type: string
          description: Name of the user
        createDate:
          type: string
          format: date
          description: Describes the date the User was created.
        status:
          type: string
          description: Status of the user, approved or not.
        rationale:
          type: string
          description: Reason why the role was not approved.
        profileCompleted:
          type: boolean
          description: The profile is completed. Researchers only.
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        researcherProperties:
          $ref: '#/components/schemas/UserProperties'
        libraryCards:
          type: array
          items:
            $ref: '#/components/schemas/LibraryCard'
    UserRole:
      type: object
      properties:
        roleId:
          type: integer
          format: int32
          description: ID of the role
        name:
          type: string
          description: Name of the role
    SimplifiedUser:
      type: object
      properties:
        dacUserId:
          type: integer
          description: ID of the user
        displayName:
          type: string
          description: Name of the user
    SamSelfDiagnostics:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enabled status
        inAllUsersGroup:
          type: boolean
          description: All Users Group status
        inGoogleProxyGroup:
          type: boolean
          description: Google Proxy Group status
    SamUserInfo:
      type: object
      properties:
        userSubjectId:
          type: string
          description: Sam User subject id
        userEmail:
          type: string
          description: Sam User email
        enabled:
          type: boolean
          description: Enabled status
    ErrorResponse:
      properties:
        message:
          type: string
          description: The error message
        code:
          type: integer
          description: The response status code
    OntologyFileMetaData:
      type: object
      properties:
        prefix:
          type: string
          description: The prefix of the ontology file, i.e. "DUOS", "DOID", etc.
        type:
          type: string
          description: The allowed type of ontology file, i.e. "Organization" or "Disease"
    OntologyFile:
      type: object
      properties:
        ontology_file:
          $ref: '#/components/schemas/OntologyFileMetaData'
    Version:
      type: object
      properties:
        hash:
          type: string
          description: Current short hash of this version
        version:
          type: string
          description: Current version
